import { AstDeclareFunction } from "./node/AstDeclareFunction";
import { AstArgument } from "./node/AstArgument";
import { AstEndStatement } from "./node/AstEndStatement";
import { AstNullStatement } from "./node/AstNullStatement";
import { AstAssignStatement } from "./node/AstAssignStatement";
import { AstBinaryOp } from "./node/AstBinaryOp";
import { AstCallStatement } from "./node/AstCallStatement";
import { AstCaseStatement } from "./node/AstCaseStatement";
import { AstConstStatement } from "./node/AstConstStatement";
import { AstConstantExpr } from "./node/AstConstantExpr";
import { AstGosubStatement } from "./node/AstGosubStatement";
import { AstGotoStatement } from "./node/AstGotoStatement";
import { AstInputStatement } from "./node/AstInputStatement";
import { AstPrintItem } from "./node/AstPrintItem";
import { AstDoStatement } from "./node/AstDoStatement";
import { AstNextStatement } from "./node/AstNextStatement";
import { AstDataStatement } from "./node/AstDataStatement";
import { AstForLoop } from "./node/AstForLoop";
import { AstIfStatement } from "./node/AstIfStatement";
import { AstMemberDeref } from "./node/AstMemberDeref";
import { AstPrintStatement } from "./node/AstPrintStatement";
import { AstPrintUsingStatement } from "./node/AstPrintUsingStatement";
import { AstReturnStatement } from "./node/AstReturnStatement";
import { AstSelectStatement } from "./node/AstSelectStatement";
import { AstSubroutine } from "./node/AstSubroutine";
import { AstUnaryOperator } from "./node/AstUnaryOperator";
import { AstVariableReference } from "./node/AstVariableReference";
import { AstWhileLoop } from "./node/AstWhileLoop";
import { AstRange } from "./node/AstRange";
import { AstProgram } from "./node/AstProgram";
import { Instruction } from "./virtualMachine/instructions/instruction";
import { IDoStatementVisitor } from "./IVisitor";
import { Label } from "./Label";
import { Locus } from "./Locus";
import { LoopContext } from "./LoopContext";
import { UserType } from "./UserType";
import { IStringDictionary } from "./base/common/collections";
/** @constructor */
export declare class CodeGenerator implements IDoStatementVisitor {
    instructions: Instruction[];
    data: any[];
    shared: IStringDictionary<boolean>;
    labels: Label[];
    labelMap: IStringDictionary<number>;
    loopStack: LoopContext[];
    selectStack: number[];
    functionNames: IStringDictionary<number>;
    lineMapping: Locus[];
    lastLine: number;
    constructor();
    link(): void;
    newLabel(basename: string): number;
    label(labelid: number): void;
    map(locus: Locus): void;
    getGotoLabel(name: string): number;
    write(name: string, arg?: number | string): void;
    visitProgram(program: AstProgram): void;
    visitDeclareFunction(node: AstDeclareFunction): void;
    visitSubroutine(node: AstSubroutine): void;
    visitCallStatement(node: AstCallStatement): void;
    visitArgument(_node: AstArgument): void;
    visitPrintUsingStatement(node: AstPrintUsingStatement): void;
    visitPrintStatement(node: AstPrintStatement): void;
    visitPrintItem(node: AstPrintItem): void;
    visitInputStatement(node: AstInputStatement): void;
    visitNullStatement(_node: AstNullStatement): void;
    visitEndStatement(node: AstEndStatement): void;
    visitForLoop(node: AstForLoop): void;
    visitNextStatement(node: AstNextStatement): void;
    visitExitStatement(node: any): void;
    visitArrayDeref(node: any): void;
    visitMemberDeref(node: AstMemberDeref): void;
    visitVariableReference(node: AstVariableReference): void;
    visitRange(_node: AstRange): void;
    visitDataStatement(node: AstDataStatement): void;
    visitReturnStatement(node: AstReturnStatement): void;
    visitRestoreStatement(node: any): void;
    visitConstStatement(constStatement: AstConstStatement): void;
    visitDefTypeStatement(def: any): void;
    visitDimStatement(node: any): void;
    visitDoStatement(node: AstDoStatement): void;
    visitWhileLoop(node: AstWhileLoop): void;
    visitIfStatement(node: AstIfStatement): void;
    visitSelectStatement(node: AstSelectStatement): void;
    visitCaseStatement(node: AstCaseStatement): void;
    visitTypeMember(node: any): void;
    visitUserType(node: UserType): void;
    visitGotoStatement(node: AstGotoStatement): void;
    visitGosub(node: AstGosubStatement): void;
    visitLabel(node: any): void;
    visitAssignStatement(node: AstAssignStatement): void;
    visitBinaryOp(node: AstBinaryOp): void;
    visitUnaryOperator(node: AstUnaryOperator): void;
    visitConstantExpr(node: AstConstantExpr): void;
}
