export declare var globalConsole: _Console;
/** @constructor */
export declare class _Console {
    canvas: HTMLCanvasElement;
    ctx: CanvasRenderingContext2D;
    interval: number;
    cursorEnabled: boolean;
    cursorShown: boolean;
    cursorBackground: any;
    keyBuffer: number[];
    hasFocus: boolean;
    fgcolourNum: number;
    bgcolourNum: number;
    bgcolour: string;
    fgcolour: string;
    curX: number;
    curY: number;
    x: number;
    y: number;
    rows: number;
    cols: number;
    charWidth: number;
    charHeight: number;
    inputMode: boolean;
    onInputDone: any;
    inputStr: number | string;
    inputPos: number;
    width: number;
    height: number;
    recording: boolean;
    recorded: string;
    constructor(canvas: HTMLCanvasElement);
    Colours: string[];
    ScreenDimensions: any;
    reset(testMode?: boolean): void;
    record(str: string): void;
    printError(str: string): void;
    setKeyBuffer(str: string): void;
    screen(num: number): boolean;
    line(x1: number, y1: number, x2: number, y2: number): void;
    lineTo(x: number, y: number): void;
    circle(x: number, y: number, radius: number, colour: any, start: any, end: any, aspect: any, step: any): void;
    get(x1: number, y1: number, x2: number, y2: number, step1: number, step2: number): ImageData;
    put(data: ImageData, x: number, y: number): void;
    paint(_x: number, _y: number, colour: any, borderColour: any, _step: number): void;
    cls(): void;
    locate(row: number, col: number): void;
    color(fg?: number, bg?: number): void;
    scroll(): void;
    input(onInputDone: any): void;
    backup(num: number): void;
    onKeyDown(event: KeyboardEvent): void;
    getKeyFromBuffer(): number;
    enableCursor(enabled: any): void;
    toggleCursor(): void;
    cursor(show: boolean): void;
    newline(): void;
    print(str: string): void;
}
