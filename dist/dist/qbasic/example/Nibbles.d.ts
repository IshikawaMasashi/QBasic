export declare const code_Nibbles = "\n'\n'                         Q B a s i c   N i b b l e s\n'\n'                   Copyright (C) Microsoft Corporation 1990\n'\n' Nibbles is a game for one or two players.  Navigate your snakes\n' around the game board trying to eat up numbers while avoiding\n' running into walls or other snakes.  The more numbers you eat up,\n' the more points you gain and the longer your snake becomes.\n'\n' To run this game, press Ctrl+F5.\n'\n' To exit QBasic, press Esc.\n'\n' To get help on a BASIC keyword, move the cursor to the keyword and press\n' F1 or click the right mouse button.\n'\n\n'Set default data type to integer for faster game play\nDEFINT A-Z\n\n'User-defined TYPEs\nTYPE snakeBody\n    row AS INTEGER\n    col AS INTEGER\nEND TYPE\n\n'This type defines the player's snake\nTYPE snaketype\n    head      AS INTEGER\n    length    AS INTEGER\n    row       AS INTEGER\n    col       AS INTEGER\n    direction AS INTEGER\n    lives     AS INTEGER\n    score     AS INTEGER\n    scolor    AS INTEGER\n    alive     AS INTEGER\nEND TYPE\n\n'This type is used to represent the playing screen in memory\n'It is used to simulate graphics in text mode, and has some interesting,\n'and slightly advanced methods to increasing the speed of operation.\n'Instead of the normal 80x25 text graphics using chr$(219) \"\u00DB\", we will be\n'using chr$(220)\"\u00DC\" and chr$(223) \"\u00DF\" and chr$(219) \"\u00DB\" to mimic an 80x50\n'pixel screen.\n'Check out sub-programs SET and POINTISTHERE to see how this is implemented\n'feel free to copy these (as well as arenaType and the DIM ARENA stmt and the\n'initialization code in the DrawScreen subprogram) and use them in your own\n'programs\nTYPE arenaType\n    realRow     AS INTEGER        'Maps the 80x50 point into the real 80x25\n    acolor      AS INTEGER        'Stores the current color of the point\n    sister      AS INTEGER        'Each char has 2 points in it.  .SISTER is\nEND TYPE                          '-1 if sister point is above, +1 if below\n\n'Sub Declarations\nDECLARE SUB SpacePause (text$)\nDECLARE SUB PrintScore (NumPlayers%, score1%, score2%, lives1%, lives2%)\nDECLARE SUB Intro ()\nDECLARE SUB GetInputs (NumPlayers, speed, diff$, monitor$)\nDECLARE SUB DrawScreen ()\nDECLARE SUB PlayNibbles (NumPlayers, speed, diff$)\nDECLARE SUB Set (row, col, acolor)\nDECLARE SUB Center (row, text$)\nDECLARE SUB DoIntro ()\nDECLARE SUB Initialize ()\nDECLARE SUB SparklePause ()\nDECLARE SUB Level (WhatToDO, sammy() AS snaketype)\nDECLARE SUB InitColors ()\nDECLARE SUB EraseSnake (snake() AS ANY, snakeBod() AS ANY, snakeNum%)\nDECLARE FUNCTION StillWantsToPlay ()\nDECLARE FUNCTION PointIsThere (row, col, backColor)\n\n'Constants\nCONST TRUE = -1\nCONST FALSE = NOT TRUE\nCONST MAXSNAKELENGTH = 1000\nCONST STARTOVER = 1             ' Parameters to 'Level' SUB\nCONST SAMELEVEL = 2\nCONST NEXTLEVEL = 3\n\n'Global Variables\nDIM SHARED arena(1 TO 50, 1 TO 80) AS arenaType\nDIM SHARED curLevel, colorTable(10)\n\n    RANDOMIZE TIMER\n    GOSUB ClearKeyLocks\n    Intro\n    GetInputs NumPlayers, speed, diff$, monitor$\n    GOSUB SetColors\n    DrawScreen\n\n    DO\n      PlayNibbles NumPlayers, speed, diff$\n    LOOP WHILE StillWantsToPlay\n\n    GOSUB RestoreKeyLocks\n    COLOR 15, 0\n    CLS\nEND\n\nClearKeyLocks:\n    DEF SEG = 0                     ' Turn off CapLock, NumLock and ScrollLock\n    KeyFlags = PEEK(1047)\n    POKE 1047, &H0\n    DEF SEG\n    RETURN\n\nRestoreKeyLocks:\n    DEF SEG = 0                     ' Restore CapLock, NumLock and ScrollLock states\n    POKE 1047, KeyFlags\n    DEF SEG\n    RETURN\n\nSetColors:\n    IF monitor$ = \"M\" THEN\n        RESTORE mono\n    ELSE\n        RESTORE normal\n    END IF\n\n    FOR a = 1 TO 6\n        READ colorTable(a)\n    NEXT a\n    RETURN\n\n           'snake1     snake2   Walls  Background  Dialogs-Fore  Back\nmono:   DATA 15,         7,       7,     0,          15,            0\nnormal: DATA 14,         13,      12,    1,          15,            4\nEND\n\n'Center:\n'  Centers text on given row\nSUB Center (row, text$)\n    LOCATE row, 41 - LEN(text$) / 2\n    PRINT text$;\nEND SUB\n\n'DrawScreen:\n'  Draws playing field\nSUB DrawScreen\n\n    'initialize screen\n    VIEW PRINT\n    COLOR colorTable(1), colorTable(4)\n    CLS\n\n    'Print title & message\n    Center 1, \"Nibbles!\"\n    Center 11, \"Initializing Playing Field...\"\n    \n    'Initialize arena array\n    FOR row = 1 TO 50\n        FOR col = 1 TO 80\n            arena(row, col).realRow = INT((row + 1) / 2)\n            arena(row, col).sister = (row MOD 2) * 2 - 1\n        NEXT col\n    NEXT row\nEND SUB\n\n'EraseSnake:\n'  Erases snake to facilitate moving through playing field\nSUB EraseSnake (snake() AS snaketype, snakeBod() AS snakeBody, snakeNum)\n\n    FOR c = 0 TO 9\n        FOR b = snake(snakeNum).length - c TO 0 STEP -10\n            tail = (snake(snakeNum).head + MAXSNAKELENGTH - b) MOD MAXSNAKELENGTH\n            Set snakeBod(tail, snakeNum).row, snakeBod(tail, snakeNum).col, colorTable(4)\n        NEXT b\n    NEXT c\n    \nEND SUB\n\n'GetInputs:\n'  Gets player inputs\nSUB GetInputs (NumPlayers, speed, diff$, monitor$)\n\n    COLOR 7, 0\n    CLS\n\n    DO\n        LOCATE 5, 47: PRINT SPACE$(34);\n        LOCATE 5, 20\n        INPUT \"How many players (1 or 2)\"; num$\n    LOOP UNTIL VAL(num$) = 1 OR VAL(num$) = 2\n    NumPlayers = VAL(num$)\n\n    LOCATE 8, 21: PRINT \"Skill level (1 to 100)\"\n    LOCATE 9, 22: PRINT \"1   = Novice\"\n    LOCATE 10, 22: PRINT \"90  = Expert\"\n    LOCATE 11, 22: PRINT \"100 = Twiddle Fingers\"\n    LOCATE 12, 15: PRINT \"(Computer speed may affect your skill level)\"\n    DO\n        LOCATE 8, 44: PRINT SPACE$(35);\n        LOCATE 8, 43\n        INPUT gamespeed$\n    LOOP UNTIL VAL(gamespeed$) >= 1 AND VAL(gamespeed$) <= 100\n    speed = VAL(gamespeed$)\n  \n    speed = (100 - speed) * 2 + 1\n\n    DO\n        LOCATE 15, 56: PRINT SPACE$(25);\n        LOCATE 15, 15\n        INPUT \"Increase game speed during play (Y or N)\"; diff$\n        diff$ = UCASE$(diff$)\n    LOOP UNTIL diff$ = \"Y\" OR diff$ = \"N\"\n\n    DO\n        LOCATE 17, 46: PRINT SPACE$(34);\n        LOCATE 17, 17\n        INPUT \"Monochrome or color monitor (M or C)\"; monitor$\n        monitor$ = UCASE$(monitor$)\n    LOOP UNTIL monitor$ = \"M\" OR monitor$ = \"C\"\n\n    startTime# = TIMER                          ' Calculate speed of system\n    FOR i# = 1 TO 1000: NEXT i#                 ' and do some compensation\n    stopTime# = TIMER\n    speed = speed * .5 / (stopTime# - startTime#)\n\nEND SUB\n\n'InitColors:\n'Initializes playing field colors\nSUB InitColors\n    \n    FOR row = 1 TO 50\n        FOR col = 1 TO 80\n            arena(row, col).acolor = colorTable(4)\n        NEXT col\n    NEXT row\n\n    CLS\n   \n    'Set (turn on) pixels for screen border\n    FOR col = 1 TO 80\n        Set 3, col, colorTable(3)\n        Set 50, col, colorTable(3)\n    NEXT col\n\n    FOR row = 4 TO 49\n        Set row, 1, colorTable(3)\n        Set row, 80, colorTable(3)\n    NEXT row\n\nEND SUB\n\n'Intro:\n'  Displays game introduction\nSUB Intro\n    SCREEN 0\n    WIDTH 80, 25\n    COLOR 15, 0\n    CLS\n\n    Center 4, \"Q B a s i c   N i b b l e s\"\n    COLOR 7\n    Center 6, \"Copyright (C) Microsoft Corporation 1990\"\n    Center 8, \"Nibbles is a game for one or two players.  Navigate your snakes\"\n    Center 9, \"around the game board trying to eat up numbers while avoiding\"\n    Center 10, \"running into walls or other snakes.  The more numbers you eat up,\"\n    Center 11, \"the more points you gain and the longer your snake becomes.\"\n    Center 13, \" Game Controls \"\n    Center 15, \"  General             Player 1               Player 2    \"\n    Center 16, \"                        (Up)                   (Up)      \"\n    Center 17, \"P - Pause                \u2191                      W       \"\n    Center 18, \"                     (Left) \u2190   \u2192 (Right)   (Left) A   D (Right)  \"\n    Center 19, \"                         \u2193                      S       \"\n    Center 20, \"                       (Down)                 (Down)     \"\n    Center 24, \"Press any key to continue\"\n\n    PLAY \"MBT160O1L8CDEDCDL4ECC\"\n    SparklePause\n\nEND SUB\n\n'Level:\n'Sets game level\nSUB Level (WhatToDO, sammy() AS snaketype) STATIC\n    \n    SELECT CASE (WhatToDO)\n\n    CASE STARTOVER\n        curLevel = 1\n    CASE NEXTLEVEL\n        curLevel = curLevel + 1\n    END SELECT\n\n    sammy(1).head = 1                       'Initialize Snakes\n    sammy(1).length = 2\n    sammy(1).alive = TRUE\n    sammy(2).head = 1\n    sammy(2).length = 2\n    sammy(2).alive = TRUE\n\n    InitColors\n    \n    SELECT CASE curLevel\n    CASE 1\n        sammy(1).row = 25: sammy(2).row = 25\n        sammy(1).col = 50: sammy(2).col = 30\n        sammy(1).direction = 4: sammy(2).direction = 3\n\n\n    CASE 2\n        FOR i = 20 TO 60\n            Set 25, i, colorTable(3)\n        NEXT i\n        sammy(1).row = 7: sammy(2).row = 43\n        sammy(1).col = 60: sammy(2).col = 20\n        sammy(1).direction = 3: sammy(2).direction = 4\n\n    CASE 3\n        FOR i = 10 TO 40\n            Set i, 20, colorTable(3)\n            Set i, 60, colorTable(3)\n        NEXT i\n        sammy(1).row = 25: sammy(2).row = 25\n        sammy(1).col = 50: sammy(2).col = 30\n        sammy(1).direction = 1: sammy(2).direction = 2\n\n    CASE 4\n        FOR i = 4 TO 30\n            Set i, 20, colorTable(3)\n            Set 53 - i, 60, colorTable(3)\n        NEXT i\n        FOR i = 2 TO 40\n            Set 38, i, colorTable(3)\n            Set 15, 81 - i, colorTable(3)\n        NEXT i\n        sammy(1).row = 7: sammy(2).row = 43\n        sammy(1).col = 60: sammy(2).col = 20\n        sammy(1).direction = 3: sammy(2).direction = 4\n   \n    CASE 5\n        FOR i = 13 TO 39\n            Set i, 21, colorTable(3)\n            Set i, 59, colorTable(3)\n        NEXT i\n        FOR i = 23 TO 57\n            Set 11, i, colorTable(3)\n            Set 41, i, colorTable(3)\n        NEXT i\n        sammy(1).row = 25: sammy(2).row = 25\n        sammy(1).col = 50: sammy(2).col = 30\n        sammy(1).direction = 1: sammy(2).direction = 2\n\n    CASE 6\n        FOR i = 4 TO 49\n            IF i > 30 OR i < 23 THEN\n                Set i, 10, colorTable(3)\n                Set i, 20, colorTable(3)\n                Set i, 30, colorTable(3)\n                Set i, 40, colorTable(3)\n                Set i, 50, colorTable(3)\n                Set i, 60, colorTable(3)\n                Set i, 70, colorTable(3)\n            END IF\n        NEXT i\n        sammy(1).row = 7: sammy(2).row = 43\n        sammy(1).col = 65: sammy(2).col = 15\n        sammy(1).direction = 2: sammy(2).direction = 1\n\n    CASE 7\n        FOR i = 4 TO 49 STEP 2\n            Set i, 40, colorTable(3)\n        NEXT i\n        sammy(1).row = 7: sammy(2).row = 43\n        sammy(1).col = 65: sammy(2).col = 15\n        sammy(1).direction = 2: sammy(2).direction = 1\n\n    CASE 8\n        FOR i = 4 TO 40\n            Set i, 10, colorTable(3)\n            Set 53 - i, 20, colorTable(3)\n            Set i, 30, colorTable(3)\n            Set 53 - i, 40, colorTable(3)\n            Set i, 50, colorTable(3)\n            Set 53 - i, 60, colorTable(3)\n            Set i, 70, colorTable(3)\n        NEXT i\n        sammy(1).row = 7: sammy(2).row = 43\n        sammy(1).col = 65: sammy(2).col = 15\n        sammy(1).direction = 2: sammy(2).direction = 1\n\n    CASE 9\n        FOR i = 6 TO 47\n            Set i, i, colorTable(3)\n            Set i, i + 28, colorTable(3)\n        NEXT i\n        sammy(1).row = 40: sammy(2).row = 15\n        sammy(1).col = 75: sammy(2).col = 5\n        sammy(1).direction = 1: sammy(2).direction = 2\n   \n    CASE ELSE\n        FOR i = 4 TO 49 STEP 2\n            Set i, 10, colorTable(3)\n            Set i + 1, 20, colorTable(3)\n            Set i, 30, colorTable(3)\n            Set i + 1, 40, colorTable(3)\n            Set i, 50, colorTable(3)\n            Set i + 1, 60, colorTable(3)\n            Set i, 70, colorTable(3)\n        NEXT i\n        sammy(1).row = 7: sammy(2).row = 43\n        sammy(1).col = 65: sammy(2).col = 15\n        sammy(1).direction = 2: sammy(2).direction = 1\n\n    END SELECT\nEND SUB\n\n'PlayNibbles:\n'  Main routine that controls game play\nSUB PlayNibbles (NumPlayers, speed, diff$)\n\n    'Initialize Snakes\n    DIM sammyBody(MAXSNAKELENGTH - 1, 1 TO 2) AS snakeBody\n    DIM sammy(1 TO 2) AS snaketype\n    sammy(1).lives = 5\n    sammy(1).score = 0\n    sammy(1).scolor = colorTable(1)\n    sammy(2).lives = 5\n    sammy(2).score = 0\n    sammy(2).scolor = colorTable(2)\n                 \n    Level STARTOVER, sammy()\n    startRow1 = sammy(1).row: startCol1 = sammy(1).col\n    startRow2 = sammy(2).row: startCol2 = sammy(2).col\n\n    curSpeed = speed\n\n    'play Nibbles until finished\n\n    SpacePause \"     Level\" + STR$(curLevel) + \",  Push Space\"\n    gameOver = FALSE\n    DO\n        IF NumPlayers = 1 THEN\n            sammy(2).row = 0\n        END IF\n\n        number = 1          'Current number that snakes are trying to run into\n        nonum = TRUE        'nonum = TRUE if a number is not on the screen\n\n        playerDied = FALSE\n        PrintScore NumPlayers, sammy(1).score, sammy(2).score, sammy(1).lives, sammy(2).lives\n        PLAY \"T160O1>L20CDEDCDL10ECC\"\n\n        DO\n            'Print number if no number exists\n            IF nonum = TRUE THEN\n                DO\n                    numberRow = INT(RND(1) * 47 + 3)\n                    NumberCol = INT(RND(1) * 78 + 2)\n                    sisterRow = numberRow + arena(numberRow, NumberCol).sister\n                LOOP UNTIL NOT PointIsThere(numberRow, NumberCol, colorTable(4)) AND NOT PointIsThere(sisterRow, NumberCol, colorTable(4))\n                numberRow = arena(numberRow, NumberCol).realRow\n                nonum = FALSE\n                COLOR colorTable(1), colorTable(4)\n                LOCATE numberRow, NumberCol\n                PRINT RIGHT$(STR$(number), 1);\n                count = 0\n            END IF\n\n            'Delay game\n            FOR a# = 1 TO curSpeed:  NEXT a#\n\n            'Get keyboard input & Change direction accordingly\n            kbd$ = INKEY$\n            SELECT CASE kbd$\n                CASE \"w\", \"W\": IF sammy(2).direction <> 2 THEN sammy(2).direction = 1\n                CASE \"s\", \"S\": IF sammy(2).direction <> 1 THEN sammy(2).direction = 2\n                CASE \"a\", \"A\": IF sammy(2).direction <> 4 THEN sammy(2).direction = 3\n                CASE \"d\", \"D\": IF sammy(2).direction <> 3 THEN sammy(2).direction = 4\n                CASE CHR$(0) + \"H\": IF sammy(1).direction <> 2 THEN sammy(1).direction = 1\n                CASE CHR$(0) + \"P\": IF sammy(1).direction <> 1 THEN sammy(1).direction = 2\n                CASE CHR$(0) + \"K\": IF sammy(1).direction <> 4 THEN sammy(1).direction = 3\n                CASE CHR$(0) + \"M\": IF sammy(1).direction <> 3 THEN sammy(1).direction = 4\n                CASE \"p\", \"P\": SpacePause \" Game Paused ... Push Space  \"\n                CASE ELSE\n            END SELECT\n\n            FOR a = 1 TO NumPlayers\n                'Move Snake\n                SELECT CASE sammy(a).direction\n                    CASE 1: sammy(a).row = sammy(a).row - 1\n                    CASE 2: sammy(a).row = sammy(a).row + 1\n                    CASE 3: sammy(a).col = sammy(a).col - 1\n                    CASE 4: sammy(a).col = sammy(a).col + 1\n                END SELECT\n\n                'If snake hits number, respond accordingly\n                IF numberRow = INT((sammy(a).row + 1) / 2) AND NumberCol = sammy(a).col THEN\n                    PLAY \"MBO0L16>CCCE\"\n                    IF sammy(a).length < (MAXSNAKELENGTH - 30) THEN\n                        sammy(a).length = sammy(a).length + number * 4\n                    END IF\n                    sammy(a).score = sammy(a).score + number\n                    PrintScore NumPlayers, sammy(1).score, sammy(2).score, sammy(1).lives, sammy(2).lives\n                    number = number + 1\n                    IF number = 10 THEN\n                        EraseSnake sammy(), sammyBody(), 1\n                        EraseSnake sammy(), sammyBody(), 2\n                        LOCATE numberRow, NumberCol: PRINT \" \"\n                        Level NEXTLEVEL, sammy()\n                        PrintScore NumPlayers, sammy(1).score, sammy(2).score, sammy(1).lives, sammy(2).lives\n                        SpacePause \"     Level\" + STR$(curLevel) + \",  Push Space\"\n                        IF NumPlayers = 1 THEN sammy(2).row = 0\n                        number = 1\n                        IF diff$ = \"P\" THEN speed = speed - 10: curSpeed = speed\n                    END IF\n                    nonum = TRUE\n                    IF curSpeed < 1 THEN curSpeed = 1\n                END IF\n            NEXT a\n\n            FOR a = 1 TO NumPlayers\n                'If player runs into any point, or the head of the other snake, it dies.\n                IF PointIsThere(sammy(a).row, sammy(a).col, colorTable(4)) OR (sammy(1).row = sammy(2).row AND sammy(1).col = sammy(2).col) THEN\n                    PLAY \"MBO0L32EFGEFDC\"\n                    COLOR , colorTable(4)\n                    LOCATE numberRow, NumberCol\n                    PRINT \" \"\n                   \n                    playerDied = TRUE\n                    sammy(a).alive = FALSE\n                    sammy(a).lives = sammy(a).lives - 1\n\n                'Otherwise, move the snake, and erase the tail\n                ELSE\n                    sammy(a).head = (sammy(a).head + 1) MOD MAXSNAKELENGTH\n                    sammyBody(sammy(a).head, a).row = sammy(a).row\n                    sammyBody(sammy(a).head, a).col = sammy(a).col\n                    tail = (sammy(a).head + MAXSNAKELENGTH - sammy(a).length) MOD MAXSNAKELENGTH\n                    Set sammyBody(tail, a).row, sammyBody(tail, a).col, colorTable(4)\n                    sammyBody(tail, a).row = 0\n                    Set sammy(a).row, sammy(a).col, sammy(a).scolor\n                END IF\n            NEXT a\n\n        LOOP UNTIL playerDied\n\n        curSpeed = speed                ' reset speed to initial value\n       \n        FOR a = 1 TO NumPlayers\n            EraseSnake sammy(), sammyBody(), a\n\n            'If dead, then erase snake in really cool way\n            IF sammy(a).alive = FALSE THEN\n                'Update score\n                sammy(a).score = sammy(a).score - 10\n                PrintScore NumPlayers, sammy(1).score, sammy(2).score, sammy(1).lives, sammy(2).lives\n                \n                IF a = 1 THEN\n                    SpacePause \" Sammy Dies! Push Space! --->\"\n                ELSE\n                    SpacePause \" <---- Jake Dies! Push Space \"\n                END IF\n            END IF\n        NEXT a\n\n        Level SAMELEVEL, sammy()\n        PrintScore NumPlayers, sammy(1).score, sammy(2).score, sammy(1).lives, sammy(2).lives\n     \n    'Play next round, until either of snake's lives have run out.\n    LOOP UNTIL sammy(1).lives = 0 OR sammy(2).lives = 0\n\nEND SUB\n\n'PointIsThere:\n'  Checks the global  arena array to see if the boolean flag is set\nFUNCTION PointIsThere (row, col, acolor)\n    IF row <> 0 THEN\n        IF arena(row, col).acolor <> acolor THEN\n            PointIsThere = TRUE\n        ELSE\n            PointIsThere = FALSE\n        END IF\n    END IF\nEND FUNCTION\n\n'PrintScore:\n'  Prints players scores and number of lives remaining\nSUB PrintScore (NumPlayers, score1, score2, lives1, lives2)\n    COLOR 15, colorTable(4)\n\n    IF NumPlayers = 2 THEN\n        LOCATE 1, 1\n        PRINT USING \"#,###,#00  Lives: #  <--JAKE\"; score2; lives2\n    END IF\n\n    LOCATE 1, 49\n    PRINT USING \"SAMMY-->  Lives: #     #,###,#00\"; lives1; score1\nEND SUB\n\n'Set:\n'  Sets row and column on playing field to given color to facilitate moving\n'  of snakes around the field.\nSUB Set (row, col, acolor)\n    IF row <> 0 THEN\n        arena(row, col).acolor = acolor             'assign color to arena\n        realRow = arena(row, col).realRow           'Get real row of pixel\n        topFlag = arena(row, col).sister + 1 / 2    'Deduce whether pixel\n                                                    'is on top\u00DF, or bottom\u00DC\n        sisterRow = row + arena(row, col).sister    'Get arena row of sister\n        sisterColor = arena(sisterRow, col).acolor  'Determine sister's color\n\n        LOCATE realRow, col\n\n        IF acolor = sisterColor THEN                'If both points are same\n            COLOR acolor, acolor                           'Print chr$(219) \"\u00DB\"\n            PRINT \"\u2588\";\n        ELSE\n            IF topFlag THEN                         'Since you cannot have\n                IF acolor > 7 THEN                  'bright backgrounds\n                    COLOR acolor, sisterColor       'determine best combo\n                    PRINT \"\u2580\";                      'to use.\n                ELSE\n                    COLOR sisterColor, acolor\n                    PRINT \"\u2584\";\n                END IF\n            ELSE\n                IF acolor > 7 THEN\n                    COLOR acolor, sisterColor\n                    PRINT \"\u2584\";\n                ELSE\n                    COLOR sisterColor, acolor\n                    PRINT \"\u2580\";\n                END IF\n            END IF\n        END IF\n    END IF\nEND SUB\n\n'SpacePause:\n'  Pauses game play and waits for space bar to be pressed before continuing\nSUB SpacePause (text$)\n\n    COLOR colorTable(5), colorTable(6)\n    Center 11, \"\u2588\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2588\"\n    Center 12, \"\u2588 \" + LEFT$(text$ + SPACE$(29), 29) + \" \u2588\"\n    Center 13, \"\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\"\n    WHILE INKEY$ <> \"\": WEND\n    WHILE INKEY$ <> \" \": WEND\n    COLOR 15, colorTable(4)\n\n    FOR i = 21 TO 26            ' Restore the screen background\n        FOR j = 24 TO 56\n            Set i, j, arena(i, j).acolor\n        NEXT j\n    NEXT i\n\nEND SUB\n\n'SparklePause:\n'  Creates flashing border for intro screen\nSUB SparklePause\n\n    COLOR 4, 0\n    a$ = \"*    *    *    *    *    *    *    *    *    *    *    *    *    *    *    *    *    \"\n    WHILE INKEY$ <> \"\": WEND 'Clear keyboard buffer\n\n    WHILE INKEY$ = \"\"\n        FOR a = 1 TO 5\n            LOCATE 1, 1                             'print horizontal sparkles\n            PRINT MID$(a$, a, 80);\n            LOCATE 22, 1\n            PRINT MID$(a$, 6 - a, 80);\n\n            FOR b = 2 TO 21                         'Print Vertical sparkles\n                c = (a + b) MOD 5\n                IF c = 1 THEN\n                    LOCATE b, 80\n                    PRINT \"*\";\n                    LOCATE 23 - b, 1\n                    PRINT \"*\";\n                ELSE\n                    LOCATE b, 80\n                    PRINT \" \";\n                    LOCATE 23 - b, 1\n                    PRINT \" \";\n                END IF\n            NEXT b\n        NEXT a\n    WEND\n\nEND SUB\n\n'StillWantsToPlay:\n'  Determines if users want to play game again.\nFUNCTION StillWantsToPlay\n\n    COLOR colorTable(5), colorTable(6)\n    Center 10, \"\u2588\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2580\u2588\"\n    Center 11, \"\u2588       G A M E   O V E R       \u2588\"\n    Center 12, \"\u2588                               \u2588\"\n    Center 13, \"\u2588      Play Again?   (Y/N)      \u2588\"\n    Center 14, \"\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\"\n\n    WHILE INKEY$ <> \"\": WEND\n    DO\n        kbd$ = UCASE$(INKEY$)\n    LOOP UNTIL kbd$ = \"Y\" OR kbd$ = \"N\"\n\n    COLOR 15, colorTable(4)\n    Center 10, \"                                 \"\n    Center 11, \"                                 \"\n    Center 12, \"                                 \"\n    Center 13, \"                                 \"\n    Center 14, \"                                 \"\n\n    IF kbd$ = \"Y\" THEN\n        StillWantsToPlay = TRUE\n    ELSE\n        StillWantsToPlay = FALSE\n        COLOR 7, 0\n        CLS\n    END IF\n\nEND FUNCTION\n";
