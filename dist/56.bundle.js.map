{"version":3,"sources":["webpack:///./node_modules/monaco-editor/esm/vs/language/json/workerManager.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/vscode-languageserver-types/main.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/languageFeatures.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/impl/scanner.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/_deps/jsonc-parser/main.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/tokenization.js","webpack:///./node_modules/monaco-editor/esm/vs/language/json/jsonMode.js"],"names":["Position","Range","Location","Color","ColorInformation","ColorPresentation","FoldingRangeKind","FoldingRange","DiagnosticRelatedInformation","DiagnosticSeverity","Diagnostic","Command","TextEdit","TextDocumentEdit","WorkspaceEdit","WorkerManager","defaults","_this","this","_defaults","_worker","_idleCheckInterval","setInterval","_checkIfIdle","_lastUsedTime","_configChangeListener","onDidChange","_stopWorker","prototype","dispose","_client","clearInterval","Date","now","_getClient","monaco","editor","createWebWorker","moduleId","label","languageId","createData","languageSettings","diagnosticsOptions","enableSchemaRequest","getProxy","getLanguageServiceWorker","resources","_i","arguments","length","then","client","_","withSyncedResources","create","line","character","is","value","candidate","Is","objectLiteral","number","one","two","three","four","start","end","Error","uri","range","defined","string","undefined","red","green","blue","alpha","color","textEdit","additionalTextEdits","typedArray","startLine","endLine","startCharacter","endCharacter","kind","result","location","message","Warning","Information","Hint","severity","code","source","relatedInformation","title","command","args","replace","newText","insert","position","del","textDocument","edits","VersionedTextDocumentIdentifier","Array","isArray","changes","documentChanges","TextDocumentIdentifier","TextDocumentItem","MarkupKind","MarkupContent","CompletionItemKind","InsertTextFormat","CompletionItem","CompletionList","MarkedString","Hover","ParameterInformation","SignatureInformation","DocumentHighlightKind","DocumentHighlight","SymbolKind","SymbolInformation","TextEditChangeImpl","push","delete","add","edit","all","clear","splice","WorkspaceChange","workspaceEdit","_textEditChanges","Object","_workspaceEdit","forEach","textDocumentEdit","textEditChange","keys","key","defineProperty","get","enumerable","configurable","getTextEditChange","version","text","PlainText","Markdown","Text","Method","Function","Constructor","Field","Variable","Class","Interface","Module","Property","Unit","Value","Enum","Keyword","Snippet","File","Reference","Folder","EnumMember","Constant","Struct","Event","Operator","TypeParameter","items","isIncomplete","fromPlainText","plainText","language","contents","documentation","parameters","Read","Write","Namespace","Package","String","Number","Boolean","Key","Null","name","containerName","CodeActionKind","CodeActionContext","CodeAction","CodeLens","FormattingOptions","DocumentSymbol","detail","selectionRange","children","deprecated","boolean","QuickFix","Refactor","RefactorExtract","RefactorInline","RefactorRewrite","Source","SourceOrganizeImports","diagnostics","only","commandOrEdit","data","tabSize","insertSpaces","DocumentLink","target","TextDocument","TextDocumentSaveReason","content","FullTextDocument","lineCount","func","getText","positionAt","offsetAt","applyEdits","document","sortedEdits","mergeSort","compare","p","left","slice","right","leftIdx","rightIdx","i","ret","a","b","diff","lastModifiedOffset","e","startOffset","endOffset","substring","Manual","AfterDelay","FocusOut","_uri","_languageId","_version","_content","_lineOffsets","update","event","getLineOffsets","lineOffsets","isLineStart","ch","charAt","offset","Math","max","min","low","high","mid","floor","lineOffset","nextLineOffset","toString","call","check","every","Uri","languageFeatures_Range","DiagnosticsAdapter","_disposables","_listener","onModelAdd","model","handle","modeId","getModeId","onDidChangeContent","clearTimeout","setTimeout","_doValidate","onModelRemoved","setModelMarkers","uriStr","listener","onDidCreateModel","onWillDisposeModel","_resetSchema","onDidChangeModelLanguage","getModels","d","resource","worker","resetSchema","doValidation","markers","map","diag","lsSeverity","MarkerSeverity","Info","toSeverity","startLineNumber","startColumn","endLineNumber","endColumn","getModel","err","console","error","fromPosition","column","lineNumber","fromRange","toRange","toTextEdit","languageFeatures_CompletionAdapter","CompletionAdapter","provideCompletionItems","context","token","getWordUntilPosition","doComplete","info","entry","item","insertText","sortText","filterText","mItemKind","languages","toCompletionItemKind","insertTextFormat","insertTextRules","CompletionItemInsertTextRule","InsertAsSnippet","suggestions","toMarkdownString","thing","HoverAdapter","provideHover","doHover","toMarkedStringArray","DocumentSymbolAdapter","provideDocumentSymbols","findDocumentSymbols","mKind","toSymbolKind","fromFormattingOptions","options","DocumentFormattingEditProvider","provideDocumentFormattingEdits","format","DocumentRangeFormattingEditProvider","provideDocumentRangeFormattingEdits","DocumentColorAdapter","provideDocumentColors","findDocumentColors","infos","provideColorPresentations","getColorPresentations","presentations","presentation","FoldingRangeAdapter","provideFoldingRanges","ranges","Comment","Imports","Region","toFoldingRangeKind","createScanner","ignoreTrivia","pos","len","tokenOffset","scanError","scanHexDigits","count","exact","digits","charCodeAt","scanNext","isWhiteSpace","fromCharCode","isLineBreak","ch_1","scanString","commentClosed","isDigit","scanNumber","isUnknownContentCharacter","setPosition","newPosition","getPosition","scan","getToken","getTokenValue","getTokenOffset","getTokenLength","getTokenError","main_createScanner","createTokenizationSupport","supportComments","getInitialState","JSONState","tokenize","state","offsetDelta","stopAtOffset","comments","numberOfInsertedCharacters","adjustOffset","scanner","lastWasColon","tokens","endState","clone","type","substr","TOKEN_DELIM_OBJECT","TOKEN_DELIM_ARRAY","TOKEN_DELIM_COLON","TOKEN_DELIM_COMMA","TOKEN_VALUE_BOOLEAN","TOKEN_VALUE_NULL","TOKEN_VALUE_STRING","TOKEN_PROPERTY_NAME","TOKEN_VALUE_NUMBER","TOKEN_COMMENT_LINE","TOKEN_COMMENT_BLOCK","getStateData","startIndex","scopes","_state","equals","other","setStateData","setupMode","disposables","uris","apply","registerCompletionItemProvider","registerHoverProvider","registerDocumentSymbolProvider","registerDocumentFormattingEditProvider","registerDocumentRangeFormattingEditProvider","setTokensProvider","setLanguageConfiguration","richEditConfiguration","registerColorProvider","registerFoldingRangeProvider","__webpack_require__","__webpack_exports__","wordPattern","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn"],"mappings":"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","file":"56.bundle.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nvar STOP_WHEN_IDLE_FOR = 2 * 60 * 1000; // 2min\r\nvar WorkerManager = /** @class */ (function () {\r\n    function WorkerManager(defaults) {\r\n        var _this = this;\r\n        this._defaults = defaults;\r\n        this._worker = null;\r\n        this._idleCheckInterval = setInterval(function () { return _this._checkIfIdle(); }, 30 * 1000);\r\n        this._lastUsedTime = 0;\r\n        this._configChangeListener = this._defaults.onDidChange(function () { return _this._stopWorker(); });\r\n    }\r\n    WorkerManager.prototype._stopWorker = function () {\r\n        if (this._worker) {\r\n            this._worker.dispose();\r\n            this._worker = null;\r\n        }\r\n        this._client = null;\r\n    };\r\n    WorkerManager.prototype.dispose = function () {\r\n        clearInterval(this._idleCheckInterval);\r\n        this._configChangeListener.dispose();\r\n        this._stopWorker();\r\n    };\r\n    WorkerManager.prototype._checkIfIdle = function () {\r\n        if (!this._worker) {\r\n            return;\r\n        }\r\n        var timePassedSinceLastUsed = Date.now() - this._lastUsedTime;\r\n        if (timePassedSinceLastUsed > STOP_WHEN_IDLE_FOR) {\r\n            this._stopWorker();\r\n        }\r\n    };\r\n    WorkerManager.prototype._getClient = function () {\r\n        this._lastUsedTime = Date.now();\r\n        if (!this._client) {\r\n            this._worker = monaco.editor.createWebWorker({\r\n                // module that exports the create() method and returns a `JSONWorker` instance\r\n                moduleId: 'vs/language/json/jsonWorker',\r\n                label: this._defaults.languageId,\r\n                // passed in to the create() method\r\n                createData: {\r\n                    languageSettings: this._defaults.diagnosticsOptions,\r\n                    languageId: this._defaults.languageId,\r\n                    enableSchemaRequest: this._defaults.diagnosticsOptions.enableSchemaRequest\r\n                }\r\n            });\r\n            this._client = this._worker.getProxy();\r\n        }\r\n        return this._client;\r\n    };\r\n    WorkerManager.prototype.getLanguageServiceWorker = function () {\r\n        var _this = this;\r\n        var resources = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            resources[_i] = arguments[_i];\r\n        }\r\n        var _client;\r\n        return this._getClient().then(function (client) {\r\n            _client = client;\r\n        }).then(function (_) {\r\n            return _this._worker.withSyncedResources(resources);\r\n        }).then(function (_) { return _client; });\r\n    };\r\n    return WorkerManager;\r\n}());\r\nexport { WorkerManager };\r\n","/* --------------------------------------------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n * ------------------------------------------------------------------------------------------ */\n'use strict';\n/**\n * The Position namespace provides helper functions to work with\n * [Position](#Position) literals.\n */\nexport var Position;\n(function (Position) {\n    /**\n     * Creates a new Position literal from the given line and character.\n     * @param line The position's line.\n     * @param character The position's character.\n     */\n    function create(line, character) {\n        return { line: line, character: character };\n    }\n    Position.create = create;\n    /**\n     * Checks whether the given liternal conforms to the [Position](#Position) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.objectLiteral(candidate) && Is.number(candidate.line) && Is.number(candidate.character);\n    }\n    Position.is = is;\n})(Position || (Position = {}));\n/**\n * The Range namespace provides helper functions to work with\n * [Range](#Range) literals.\n */\nexport var Range;\n(function (Range) {\n    function create(one, two, three, four) {\n        if (Is.number(one) && Is.number(two) && Is.number(three) && Is.number(four)) {\n            return { start: Position.create(one, two), end: Position.create(three, four) };\n        }\n        else if (Position.is(one) && Position.is(two)) {\n            return { start: one, end: two };\n        }\n        else {\n            throw new Error(\"Range#create called with invalid arguments[\" + one + \", \" + two + \", \" + three + \", \" + four + \"]\");\n        }\n    }\n    Range.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Range](#Range) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.objectLiteral(candidate) && Position.is(candidate.start) && Position.is(candidate.end);\n    }\n    Range.is = is;\n})(Range || (Range = {}));\n/**\n * The Location namespace provides helper functions to work with\n * [Location](#Location) literals.\n */\nexport var Location;\n(function (Location) {\n    /**\n     * Creates a Location literal.\n     * @param uri The location's uri.\n     * @param range The location's range.\n     */\n    function create(uri, range) {\n        return { uri: uri, range: range };\n    }\n    Location.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Location](#Location) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.string(candidate.uri) || Is.undefined(candidate.uri));\n    }\n    Location.is = is;\n})(Location || (Location = {}));\n/**\n * The Color namespace provides helper functions to work with\n * [Color](#Color) literals.\n */\nexport var Color;\n(function (Color) {\n    /**\n     * Creates a new Color literal.\n     */\n    function create(red, green, blue, alpha) {\n        return {\n            red: red,\n            green: green,\n            blue: blue,\n            alpha: alpha,\n        };\n    }\n    Color.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Color](#Color) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.number(candidate.red)\n            && Is.number(candidate.green)\n            && Is.number(candidate.blue)\n            && Is.number(candidate.alpha);\n    }\n    Color.is = is;\n})(Color || (Color = {}));\n/**\n * The ColorInformation namespace provides helper functions to work with\n * [ColorInformation](#ColorInformation) literals.\n */\nexport var ColorInformation;\n(function (ColorInformation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(range, color) {\n        return {\n            range: range,\n            color: color,\n        };\n    }\n    ColorInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Range.is(candidate.range) && Color.is(candidate.color);\n    }\n    ColorInformation.is = is;\n})(ColorInformation || (ColorInformation = {}));\n/**\n * The Color namespace provides helper functions to work with\n * [ColorPresentation](#ColorPresentation) literals.\n */\nexport var ColorPresentation;\n(function (ColorPresentation) {\n    /**\n     * Creates a new ColorInformation literal.\n     */\n    function create(label, textEdit, additionalTextEdits) {\n        return {\n            label: label,\n            textEdit: textEdit,\n            additionalTextEdits: additionalTextEdits,\n        };\n    }\n    ColorPresentation.create = create;\n    /**\n     * Checks whether the given literal conforms to the [ColorInformation](#ColorInformation) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.string(candidate.label)\n            && (Is.undefined(candidate.textEdit) || TextEdit.is(candidate))\n            && (Is.undefined(candidate.additionalTextEdits) || Is.typedArray(candidate.additionalTextEdits, TextEdit.is));\n    }\n    ColorPresentation.is = is;\n})(ColorPresentation || (ColorPresentation = {}));\n/**\n * Enum of known range kinds\n */\nexport var FoldingRangeKind;\n(function (FoldingRangeKind) {\n    /**\n     * Folding range for a comment\n     */\n    FoldingRangeKind[\"Comment\"] = \"comment\";\n    /**\n     * Folding range for a imports or includes\n     */\n    FoldingRangeKind[\"Imports\"] = \"imports\";\n    /**\n     * Folding range for a region (e.g. `#region`)\n     */\n    FoldingRangeKind[\"Region\"] = \"region\";\n})(FoldingRangeKind || (FoldingRangeKind = {}));\n/**\n * The folding range namespace provides helper functions to work with\n * [FoldingRange](#FoldingRange) literals.\n */\nexport var FoldingRange;\n(function (FoldingRange) {\n    /**\n     * Creates a new FoldingRange literal.\n     */\n    function create(startLine, endLine, startCharacter, endCharacter, kind) {\n        var result = {\n            startLine: startLine,\n            endLine: endLine\n        };\n        if (Is.defined(startCharacter)) {\n            result.startCharacter = startCharacter;\n        }\n        if (Is.defined(endCharacter)) {\n            result.endCharacter = endCharacter;\n        }\n        if (Is.defined(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    FoldingRange.create = create;\n    /**\n     * Checks whether the given literal conforms to the [FoldingRange](#FoldingRange) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.number(candidate.startLine) && Is.number(candidate.startLine)\n            && (Is.undefined(candidate.startCharacter) || Is.number(candidate.startCharacter))\n            && (Is.undefined(candidate.endCharacter) || Is.number(candidate.endCharacter))\n            && (Is.undefined(candidate.kind) || Is.string(candidate.kind));\n    }\n    FoldingRange.is = is;\n})(FoldingRange || (FoldingRange = {}));\n/**\n * The DiagnosticRelatedInformation namespace provides helper functions to work with\n * [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) literals.\n */\nexport var DiagnosticRelatedInformation;\n(function (DiagnosticRelatedInformation) {\n    /**\n     * Creates a new DiagnosticRelatedInformation literal.\n     */\n    function create(location, message) {\n        return {\n            location: location,\n            message: message\n        };\n    }\n    DiagnosticRelatedInformation.create = create;\n    /**\n     * Checks whether the given literal conforms to the [DiagnosticRelatedInformation](#DiagnosticRelatedInformation) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Location.is(candidate.location) && Is.string(candidate.message);\n    }\n    DiagnosticRelatedInformation.is = is;\n})(DiagnosticRelatedInformation || (DiagnosticRelatedInformation = {}));\n/**\n * The diagnostic's severity.\n */\nexport var DiagnosticSeverity;\n(function (DiagnosticSeverity) {\n    /**\n     * Reports an error.\n     */\n    DiagnosticSeverity.Error = 1;\n    /**\n     * Reports a warning.\n     */\n    DiagnosticSeverity.Warning = 2;\n    /**\n     * Reports an information.\n     */\n    DiagnosticSeverity.Information = 3;\n    /**\n     * Reports a hint.\n     */\n    DiagnosticSeverity.Hint = 4;\n})(DiagnosticSeverity || (DiagnosticSeverity = {}));\n/**\n * The Diagnostic namespace provides helper functions to work with\n * [Diagnostic](#Diagnostic) literals.\n */\nexport var Diagnostic;\n(function (Diagnostic) {\n    /**\n     * Creates a new Diagnostic literal.\n     */\n    function create(range, message, severity, code, source, relatedInformation) {\n        var result = { range: range, message: message };\n        if (Is.defined(severity)) {\n            result.severity = severity;\n        }\n        if (Is.defined(code)) {\n            result.code = code;\n        }\n        if (Is.defined(source)) {\n            result.source = source;\n        }\n        if (Is.defined(relatedInformation)) {\n            result.relatedInformation = relatedInformation;\n        }\n        return result;\n    }\n    Diagnostic.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Diagnostic](#Diagnostic) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate)\n            && Range.is(candidate.range)\n            && Is.string(candidate.message)\n            && (Is.number(candidate.severity) || Is.undefined(candidate.severity))\n            && (Is.number(candidate.code) || Is.string(candidate.code) || Is.undefined(candidate.code))\n            && (Is.string(candidate.source) || Is.undefined(candidate.source))\n            && (Is.undefined(candidate.relatedInformation) || Is.typedArray(candidate.relatedInformation, DiagnosticRelatedInformation.is));\n    }\n    Diagnostic.is = is;\n})(Diagnostic || (Diagnostic = {}));\n/**\n * The Command namespace provides helper functions to work with\n * [Command](#Command) literals.\n */\nexport var Command;\n(function (Command) {\n    /**\n     * Creates a new Command literal.\n     */\n    function create(title, command) {\n        var args = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            args[_i - 2] = arguments[_i];\n        }\n        var result = { title: title, command: command };\n        if (Is.defined(args) && args.length > 0) {\n            result.arguments = args;\n        }\n        return result;\n    }\n    Command.create = create;\n    /**\n     * Checks whether the given literal conforms to the [Command](#Command) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.title) && Is.string(candidate.command);\n    }\n    Command.is = is;\n})(Command || (Command = {}));\n/**\n * The TextEdit namespace provides helper function to create replace,\n * insert and delete edits more easily.\n */\nexport var TextEdit;\n(function (TextEdit) {\n    /**\n     * Creates a replace text edit.\n     * @param range The range of text to be replaced.\n     * @param newText The new text.\n     */\n    function replace(range, newText) {\n        return { range: range, newText: newText };\n    }\n    TextEdit.replace = replace;\n    /**\n     * Creates a insert text edit.\n     * @param position The position to insert the text at.\n     * @param newText The text to be inserted.\n     */\n    function insert(position, newText) {\n        return { range: { start: position, end: position }, newText: newText };\n    }\n    TextEdit.insert = insert;\n    /**\n     * Creates a delete text edit.\n     * @param range The range of text to be deleted.\n     */\n    function del(range) {\n        return { range: range, newText: '' };\n    }\n    TextEdit.del = del;\n    function is(value) {\n        var candidate = value;\n        return Is.objectLiteral(candidate)\n            && Is.string(candidate.newText)\n            && Range.is(candidate.range);\n    }\n    TextEdit.is = is;\n})(TextEdit || (TextEdit = {}));\n/**\n * The TextDocumentEdit namespace provides helper function to create\n * an edit that manipulates a text document.\n */\nexport var TextDocumentEdit;\n(function (TextDocumentEdit) {\n    /**\n     * Creates a new `TextDocumentEdit`\n     */\n    function create(textDocument, edits) {\n        return { textDocument: textDocument, edits: edits };\n    }\n    TextDocumentEdit.create = create;\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate)\n            && VersionedTextDocumentIdentifier.is(candidate.textDocument)\n            && Array.isArray(candidate.edits);\n    }\n    TextDocumentEdit.is = is;\n})(TextDocumentEdit || (TextDocumentEdit = {}));\nexport var WorkspaceEdit;\n(function (WorkspaceEdit) {\n    function is(value) {\n        var candidate = value;\n        return candidate &&\n            (candidate.changes !== void 0 || candidate.documentChanges !== void 0) &&\n            (candidate.documentChanges === void 0 || Is.typedArray(candidate.documentChanges, TextDocumentEdit.is));\n    }\n    WorkspaceEdit.is = is;\n})(WorkspaceEdit || (WorkspaceEdit = {}));\nvar TextEditChangeImpl = /** @class */ (function () {\n    function TextEditChangeImpl(edits) {\n        this.edits = edits;\n    }\n    TextEditChangeImpl.prototype.insert = function (position, newText) {\n        this.edits.push(TextEdit.insert(position, newText));\n    };\n    TextEditChangeImpl.prototype.replace = function (range, newText) {\n        this.edits.push(TextEdit.replace(range, newText));\n    };\n    TextEditChangeImpl.prototype.delete = function (range) {\n        this.edits.push(TextEdit.del(range));\n    };\n    TextEditChangeImpl.prototype.add = function (edit) {\n        this.edits.push(edit);\n    };\n    TextEditChangeImpl.prototype.all = function () {\n        return this.edits;\n    };\n    TextEditChangeImpl.prototype.clear = function () {\n        this.edits.splice(0, this.edits.length);\n    };\n    return TextEditChangeImpl;\n}());\n/**\n * A workspace change helps constructing changes to a workspace.\n */\nvar WorkspaceChange = /** @class */ (function () {\n    function WorkspaceChange(workspaceEdit) {\n        var _this = this;\n        this._textEditChanges = Object.create(null);\n        if (workspaceEdit) {\n            this._workspaceEdit = workspaceEdit;\n            if (workspaceEdit.documentChanges) {\n                workspaceEdit.documentChanges.forEach(function (textDocumentEdit) {\n                    var textEditChange = new TextEditChangeImpl(textDocumentEdit.edits);\n                    _this._textEditChanges[textDocumentEdit.textDocument.uri] = textEditChange;\n                });\n            }\n            else if (workspaceEdit.changes) {\n                Object.keys(workspaceEdit.changes).forEach(function (key) {\n                    var textEditChange = new TextEditChangeImpl(workspaceEdit.changes[key]);\n                    _this._textEditChanges[key] = textEditChange;\n                });\n            }\n        }\n    }\n    Object.defineProperty(WorkspaceChange.prototype, \"edit\", {\n        /**\n         * Returns the underlying [WorkspaceEdit](#WorkspaceEdit) literal\n         * use to be returned from a workspace edit operation like rename.\n         */\n        get: function () {\n            return this._workspaceEdit;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WorkspaceChange.prototype.getTextEditChange = function (key) {\n        if (VersionedTextDocumentIdentifier.is(key)) {\n            if (!this._workspaceEdit) {\n                this._workspaceEdit = {\n                    documentChanges: []\n                };\n            }\n            if (!this._workspaceEdit.documentChanges) {\n                throw new Error('Workspace edit is not configured for versioned document changes.');\n            }\n            var textDocument = key;\n            var result = this._textEditChanges[textDocument.uri];\n            if (!result) {\n                var edits = [];\n                var textDocumentEdit = {\n                    textDocument: textDocument,\n                    edits: edits\n                };\n                this._workspaceEdit.documentChanges.push(textDocumentEdit);\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[textDocument.uri] = result;\n            }\n            return result;\n        }\n        else {\n            if (!this._workspaceEdit) {\n                this._workspaceEdit = {\n                    changes: Object.create(null)\n                };\n            }\n            if (!this._workspaceEdit.changes) {\n                throw new Error('Workspace edit is not configured for normal text edit changes.');\n            }\n            var result = this._textEditChanges[key];\n            if (!result) {\n                var edits = [];\n                this._workspaceEdit.changes[key] = edits;\n                result = new TextEditChangeImpl(edits);\n                this._textEditChanges[key] = result;\n            }\n            return result;\n        }\n    };\n    return WorkspaceChange;\n}());\nexport { WorkspaceChange };\n/**\n * The TextDocumentIdentifier namespace provides helper functions to work with\n * [TextDocumentIdentifier](#TextDocumentIdentifier) literals.\n */\nexport var TextDocumentIdentifier;\n(function (TextDocumentIdentifier) {\n    /**\n     * Creates a new TextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     */\n    function create(uri) {\n        return { uri: uri };\n    }\n    TextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the [TextDocumentIdentifier](#TextDocumentIdentifier) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri);\n    }\n    TextDocumentIdentifier.is = is;\n})(TextDocumentIdentifier || (TextDocumentIdentifier = {}));\n/**\n * The VersionedTextDocumentIdentifier namespace provides helper functions to work with\n * [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) literals.\n */\nexport var VersionedTextDocumentIdentifier;\n(function (VersionedTextDocumentIdentifier) {\n    /**\n     * Creates a new VersionedTextDocumentIdentifier literal.\n     * @param uri The document's uri.\n     * @param uri The document's text.\n     */\n    function create(uri, version) {\n        return { uri: uri, version: version };\n    }\n    VersionedTextDocumentIdentifier.create = create;\n    /**\n     * Checks whether the given literal conforms to the [VersionedTextDocumentIdentifier](#VersionedTextDocumentIdentifier) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.number(candidate.version);\n    }\n    VersionedTextDocumentIdentifier.is = is;\n})(VersionedTextDocumentIdentifier || (VersionedTextDocumentIdentifier = {}));\n/**\n * The TextDocumentItem namespace provides helper functions to work with\n * [TextDocumentItem](#TextDocumentItem) literals.\n */\nexport var TextDocumentItem;\n(function (TextDocumentItem) {\n    /**\n     * Creates a new TextDocumentItem literal.\n     * @param uri The document's uri.\n     * @param languageId The document's language identifier.\n     * @param version The document's version number.\n     * @param text The document's text.\n     */\n    function create(uri, languageId, version, text) {\n        return { uri: uri, languageId: languageId, version: version, text: text };\n    }\n    TextDocumentItem.create = create;\n    /**\n     * Checks whether the given literal conforms to the [TextDocumentItem](#TextDocumentItem) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && Is.string(candidate.languageId) && Is.number(candidate.version) && Is.string(candidate.text);\n    }\n    TextDocumentItem.is = is;\n})(TextDocumentItem || (TextDocumentItem = {}));\n/**\n * Describes the content type that a client supports in various\n * result literals like `Hover`, `ParameterInfo` or `CompletionItem`.\n *\n * Please note that `MarkupKinds` must not start with a `$`. This kinds\n * are reserved for internal usage.\n */\nexport var MarkupKind;\n(function (MarkupKind) {\n    /**\n     * Plain text is supported as a content format\n     */\n    MarkupKind.PlainText = 'plaintext';\n    /**\n     * Markdown is supported as a content format\n     */\n    MarkupKind.Markdown = 'markdown';\n})(MarkupKind || (MarkupKind = {}));\n(function (MarkupKind) {\n    /**\n     * Checks whether the given value is a value of the [MarkupKind](#MarkupKind) type.\n     */\n    function is(value) {\n        var candidate = value;\n        return candidate === MarkupKind.PlainText || candidate === MarkupKind.Markdown;\n    }\n    MarkupKind.is = is;\n})(MarkupKind || (MarkupKind = {}));\nexport var MarkupContent;\n(function (MarkupContent) {\n    /**\n     * Checks whether the given value conforms to the [MarkupContent](#MarkupContent) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.objectLiteral(value) && MarkupKind.is(candidate.kind) && Is.string(candidate.value);\n    }\n    MarkupContent.is = is;\n})(MarkupContent || (MarkupContent = {}));\n/**\n * The kind of a completion entry.\n */\nexport var CompletionItemKind;\n(function (CompletionItemKind) {\n    CompletionItemKind.Text = 1;\n    CompletionItemKind.Method = 2;\n    CompletionItemKind.Function = 3;\n    CompletionItemKind.Constructor = 4;\n    CompletionItemKind.Field = 5;\n    CompletionItemKind.Variable = 6;\n    CompletionItemKind.Class = 7;\n    CompletionItemKind.Interface = 8;\n    CompletionItemKind.Module = 9;\n    CompletionItemKind.Property = 10;\n    CompletionItemKind.Unit = 11;\n    CompletionItemKind.Value = 12;\n    CompletionItemKind.Enum = 13;\n    CompletionItemKind.Keyword = 14;\n    CompletionItemKind.Snippet = 15;\n    CompletionItemKind.Color = 16;\n    CompletionItemKind.File = 17;\n    CompletionItemKind.Reference = 18;\n    CompletionItemKind.Folder = 19;\n    CompletionItemKind.EnumMember = 20;\n    CompletionItemKind.Constant = 21;\n    CompletionItemKind.Struct = 22;\n    CompletionItemKind.Event = 23;\n    CompletionItemKind.Operator = 24;\n    CompletionItemKind.TypeParameter = 25;\n})(CompletionItemKind || (CompletionItemKind = {}));\n/**\n * Defines whether the insert text in a completion item should be interpreted as\n * plain text or a snippet.\n */\nexport var InsertTextFormat;\n(function (InsertTextFormat) {\n    /**\n     * The primary text to be inserted is treated as a plain string.\n     */\n    InsertTextFormat.PlainText = 1;\n    /**\n     * The primary text to be inserted is treated as a snippet.\n     *\n     * A snippet can define tab stops and placeholders with `$1`, `$2`\n     * and `${3:foo}`. `$0` defines the final tab stop, it defaults to\n     * the end of the snippet. Placeholders with equal identifiers are linked,\n     * that is typing in one will update others too.\n     *\n     * See also: https://github.com/Microsoft/vscode/blob/master/src/vs/editor/contrib/snippet/common/snippet.md\n     */\n    InsertTextFormat.Snippet = 2;\n})(InsertTextFormat || (InsertTextFormat = {}));\n/**\n * The CompletionItem namespace provides functions to deal with\n * completion items.\n */\nexport var CompletionItem;\n(function (CompletionItem) {\n    /**\n     * Create a completion item and seed it with a label.\n     * @param label The completion item's label\n     */\n    function create(label) {\n        return { label: label };\n    }\n    CompletionItem.create = create;\n})(CompletionItem || (CompletionItem = {}));\n/**\n * The CompletionList namespace provides functions to deal with\n * completion lists.\n */\nexport var CompletionList;\n(function (CompletionList) {\n    /**\n     * Creates a new completion list.\n     *\n     * @param items The completion items.\n     * @param isIncomplete The list is not complete.\n     */\n    function create(items, isIncomplete) {\n        return { items: items ? items : [], isIncomplete: !!isIncomplete };\n    }\n    CompletionList.create = create;\n})(CompletionList || (CompletionList = {}));\nexport var MarkedString;\n(function (MarkedString) {\n    /**\n     * Creates a marked string from plain text.\n     *\n     * @param plainText The plain text.\n     */\n    function fromPlainText(plainText) {\n        return plainText.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, \"\\\\$&\"); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n    }\n    MarkedString.fromPlainText = fromPlainText;\n    /**\n     * Checks whether the given value conforms to the [MarkedString](#MarkedString) type.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.string(candidate) || (Is.objectLiteral(candidate) && Is.string(candidate.language) && Is.string(candidate.value));\n    }\n    MarkedString.is = is;\n})(MarkedString || (MarkedString = {}));\nexport var Hover;\n(function (Hover) {\n    /**\n     * Checks whether the given value conforms to the [Hover](#Hover) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.objectLiteral(candidate) && (MarkupContent.is(candidate.contents) ||\n            MarkedString.is(candidate.contents) ||\n            Is.typedArray(candidate.contents, MarkedString.is)) && (value.range === void 0 || Range.is(value.range));\n    }\n    Hover.is = is;\n})(Hover || (Hover = {}));\n/**\n * The ParameterInformation namespace provides helper functions to work with\n * [ParameterInformation](#ParameterInformation) literals.\n */\nexport var ParameterInformation;\n(function (ParameterInformation) {\n    /**\n     * Creates a new parameter information literal.\n     *\n     * @param label A label string.\n     * @param documentation A doc string.\n     */\n    function create(label, documentation) {\n        return documentation ? { label: label, documentation: documentation } : { label: label };\n    }\n    ParameterInformation.create = create;\n    ;\n})(ParameterInformation || (ParameterInformation = {}));\n/**\n * The SignatureInformation namespace provides helper functions to work with\n * [SignatureInformation](#SignatureInformation) literals.\n */\nexport var SignatureInformation;\n(function (SignatureInformation) {\n    function create(label, documentation) {\n        var parameters = [];\n        for (var _i = 2; _i < arguments.length; _i++) {\n            parameters[_i - 2] = arguments[_i];\n        }\n        var result = { label: label };\n        if (Is.defined(documentation)) {\n            result.documentation = documentation;\n        }\n        if (Is.defined(parameters)) {\n            result.parameters = parameters;\n        }\n        else {\n            result.parameters = [];\n        }\n        return result;\n    }\n    SignatureInformation.create = create;\n})(SignatureInformation || (SignatureInformation = {}));\n/**\n * A document highlight kind.\n */\nexport var DocumentHighlightKind;\n(function (DocumentHighlightKind) {\n    /**\n     * A textual occurrence.\n     */\n    DocumentHighlightKind.Text = 1;\n    /**\n     * Read-access of a symbol, like reading a variable.\n     */\n    DocumentHighlightKind.Read = 2;\n    /**\n     * Write-access of a symbol, like writing to a variable.\n     */\n    DocumentHighlightKind.Write = 3;\n})(DocumentHighlightKind || (DocumentHighlightKind = {}));\n/**\n * DocumentHighlight namespace to provide helper functions to work with\n * [DocumentHighlight](#DocumentHighlight) literals.\n */\nexport var DocumentHighlight;\n(function (DocumentHighlight) {\n    /**\n     * Create a DocumentHighlight object.\n     * @param range The range the highlight applies to.\n     */\n    function create(range, kind) {\n        var result = { range: range };\n        if (Is.number(kind)) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    DocumentHighlight.create = create;\n})(DocumentHighlight || (DocumentHighlight = {}));\n/**\n * A symbol kind.\n */\nexport var SymbolKind;\n(function (SymbolKind) {\n    SymbolKind.File = 1;\n    SymbolKind.Module = 2;\n    SymbolKind.Namespace = 3;\n    SymbolKind.Package = 4;\n    SymbolKind.Class = 5;\n    SymbolKind.Method = 6;\n    SymbolKind.Property = 7;\n    SymbolKind.Field = 8;\n    SymbolKind.Constructor = 9;\n    SymbolKind.Enum = 10;\n    SymbolKind.Interface = 11;\n    SymbolKind.Function = 12;\n    SymbolKind.Variable = 13;\n    SymbolKind.Constant = 14;\n    SymbolKind.String = 15;\n    SymbolKind.Number = 16;\n    SymbolKind.Boolean = 17;\n    SymbolKind.Array = 18;\n    SymbolKind.Object = 19;\n    SymbolKind.Key = 20;\n    SymbolKind.Null = 21;\n    SymbolKind.EnumMember = 22;\n    SymbolKind.Struct = 23;\n    SymbolKind.Event = 24;\n    SymbolKind.Operator = 25;\n    SymbolKind.TypeParameter = 26;\n})(SymbolKind || (SymbolKind = {}));\nexport var SymbolInformation;\n(function (SymbolInformation) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the location of the symbol.\n     * @param uri The resource of the location of symbol, defaults to the current document.\n     * @param containerName The name of the symbol containing the symbol.\n     */\n    function create(name, kind, range, uri, containerName) {\n        var result = {\n            name: name,\n            kind: kind,\n            location: { uri: uri, range: range }\n        };\n        if (containerName) {\n            result.containerName = containerName;\n        }\n        return result;\n    }\n    SymbolInformation.create = create;\n})(SymbolInformation || (SymbolInformation = {}));\n/**\n * Represents programming constructs like variables, classes, interfaces etc.\n * that appear in a document. Document symbols can be hierarchical and they\n * have two ranges: one that encloses its definition and one that points to\n * its most interesting range, e.g. the range of an identifier.\n */\nvar DocumentSymbol = /** @class */ (function () {\n    function DocumentSymbol() {\n    }\n    return DocumentSymbol;\n}());\nexport { DocumentSymbol };\n(function (DocumentSymbol) {\n    /**\n     * Creates a new symbol information literal.\n     *\n     * @param name The name of the symbol.\n     * @param detail The detail of the symbol.\n     * @param kind The kind of the symbol.\n     * @param range The range of the symbol.\n     * @param selectionRange The selectionRange of the symbol.\n     * @param children Children of the symbol.\n     */\n    function create(name, detail, kind, range, selectionRange, children) {\n        var result = {\n            name: name,\n            detail: detail,\n            kind: kind,\n            range: range,\n            selectionRange: selectionRange\n        };\n        if (children !== void 0) {\n            result.children = children;\n        }\n        return result;\n    }\n    DocumentSymbol.create = create;\n    /**\n     * Checks whether the given literal conforms to the [DocumentSymbol](#DocumentSymbol) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return candidate &&\n            Is.string(candidate.name) && Is.number(candidate.kind) &&\n            Range.is(candidate.range) && Range.is(candidate.selectionRange) &&\n            (candidate.detail === void 0 || Is.string(candidate.detail)) &&\n            (candidate.deprecated === void 0 || Is.boolean(candidate.deprecated)) &&\n            (candidate.children === void 0 || Array.isArray(candidate.children));\n    }\n    DocumentSymbol.is = is;\n})(DocumentSymbol || (DocumentSymbol = {}));\n/**\n * A set of predefined code action kinds\n */\nexport var CodeActionKind;\n(function (CodeActionKind) {\n    /**\n     * Base kind for quickfix actions: 'quickfix'\n     */\n    CodeActionKind.QuickFix = 'quickfix';\n    /**\n     * Base kind for refactoring actions: 'refactor'\n     */\n    CodeActionKind.Refactor = 'refactor';\n    /**\n     * Base kind for refactoring extraction actions: 'refactor.extract'\n     *\n     * Example extract actions:\n     *\n     * - Extract method\n     * - Extract function\n     * - Extract variable\n     * - Extract interface from class\n     * - ...\n     */\n    CodeActionKind.RefactorExtract = 'refactor.extract';\n    /**\n     * Base kind for refactoring inline actions: 'refactor.inline'\n     *\n     * Example inline actions:\n     *\n     * - Inline function\n     * - Inline variable\n     * - Inline constant\n     * - ...\n     */\n    CodeActionKind.RefactorInline = 'refactor.inline';\n    /**\n     * Base kind for refactoring rewrite actions: 'refactor.rewrite'\n     *\n     * Example rewrite actions:\n     *\n     * - Convert JavaScript function to class\n     * - Add or remove parameter\n     * - Encapsulate field\n     * - Make method static\n     * - Move method to base class\n     * - ...\n     */\n    CodeActionKind.RefactorRewrite = 'refactor.rewrite';\n    /**\n     * Base kind for source actions: `source`\n     *\n     * Source code actions apply to the entire file.\n     */\n    CodeActionKind.Source = 'source';\n    /**\n     * Base kind for an organize imports source action: `source.organizeImports`\n     */\n    CodeActionKind.SourceOrganizeImports = 'source.organizeImports';\n})(CodeActionKind || (CodeActionKind = {}));\n/**\n * The CodeActionContext namespace provides helper functions to work with\n * [CodeActionContext](#CodeActionContext) literals.\n */\nexport var CodeActionContext;\n(function (CodeActionContext) {\n    /**\n     * Creates a new CodeActionContext literal.\n     */\n    function create(diagnostics, only) {\n        var result = { diagnostics: diagnostics };\n        if (only !== void 0 && only !== null) {\n            result.only = only;\n        }\n        return result;\n    }\n    CodeActionContext.create = create;\n    /**\n     * Checks whether the given literal conforms to the [CodeActionContext](#CodeActionContext) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.typedArray(candidate.diagnostics, Diagnostic.is) && (candidate.only === void 0 || Is.typedArray(candidate.only, Is.string));\n    }\n    CodeActionContext.is = is;\n})(CodeActionContext || (CodeActionContext = {}));\nexport var CodeAction;\n(function (CodeAction) {\n    function create(title, commandOrEdit, kind) {\n        var result = { title: title };\n        if (Command.is(commandOrEdit)) {\n            result.command = commandOrEdit;\n        }\n        else {\n            result.edit = commandOrEdit;\n        }\n        if (kind !== void null) {\n            result.kind = kind;\n        }\n        return result;\n    }\n    CodeAction.create = create;\n    function is(value) {\n        var candidate = value;\n        return candidate && Is.string(candidate.title) &&\n            (candidate.diagnostics === void 0 || Is.typedArray(candidate.diagnostics, Diagnostic.is)) &&\n            (candidate.kind === void 0 || Is.string(candidate.kind)) &&\n            (candidate.edit !== void 0 || candidate.command !== void 0) &&\n            (candidate.command === void 0 || Command.is(candidate.command)) &&\n            (candidate.edit === void 0 || WorkspaceEdit.is(candidate.edit));\n    }\n    CodeAction.is = is;\n})(CodeAction || (CodeAction = {}));\n/**\n * The CodeLens namespace provides helper functions to work with\n * [CodeLens](#CodeLens) literals.\n */\nexport var CodeLens;\n(function (CodeLens) {\n    /**\n     * Creates a new CodeLens literal.\n     */\n    function create(range, data) {\n        var result = { range: range };\n        if (Is.defined(data))\n            result.data = data;\n        return result;\n    }\n    CodeLens.create = create;\n    /**\n     * Checks whether the given literal conforms to the [CodeLens](#CodeLens) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.command) || Command.is(candidate.command));\n    }\n    CodeLens.is = is;\n})(CodeLens || (CodeLens = {}));\n/**\n * The FormattingOptions namespace provides helper functions to work with\n * [FormattingOptions](#FormattingOptions) literals.\n */\nexport var FormattingOptions;\n(function (FormattingOptions) {\n    /**\n     * Creates a new FormattingOptions literal.\n     */\n    function create(tabSize, insertSpaces) {\n        return { tabSize: tabSize, insertSpaces: insertSpaces };\n    }\n    FormattingOptions.create = create;\n    /**\n     * Checks whether the given literal conforms to the [FormattingOptions](#FormattingOptions) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.number(candidate.tabSize) && Is.boolean(candidate.insertSpaces);\n    }\n    FormattingOptions.is = is;\n})(FormattingOptions || (FormattingOptions = {}));\n/**\n * A document link is a range in a text document that links to an internal or external resource, like another\n * text document or a web site.\n */\nvar DocumentLink = /** @class */ (function () {\n    function DocumentLink() {\n    }\n    return DocumentLink;\n}());\nexport { DocumentLink };\n/**\n * The DocumentLink namespace provides helper functions to work with\n * [DocumentLink](#DocumentLink) literals.\n */\n(function (DocumentLink) {\n    /**\n     * Creates a new DocumentLink literal.\n     */\n    function create(range, target, data) {\n        return { range: range, target: target, data: data };\n    }\n    DocumentLink.create = create;\n    /**\n     * Checks whether the given literal conforms to the [DocumentLink](#DocumentLink) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Range.is(candidate.range) && (Is.undefined(candidate.target) || Is.string(candidate.target));\n    }\n    DocumentLink.is = is;\n})(DocumentLink || (DocumentLink = {}));\nexport var EOL = ['\\n', '\\r\\n', '\\r'];\nexport var TextDocument;\n(function (TextDocument) {\n    /**\n     * Creates a new ITextDocument literal from the given uri and content.\n     * @param uri The document's uri.\n     * @param languageId  The document's language Id.\n     * @param content The document's content.\n     */\n    function create(uri, languageId, version, content) {\n        return new FullTextDocument(uri, languageId, version, content);\n    }\n    TextDocument.create = create;\n    /**\n     * Checks whether the given literal conforms to the [ITextDocument](#ITextDocument) interface.\n     */\n    function is(value) {\n        var candidate = value;\n        return Is.defined(candidate) && Is.string(candidate.uri) && (Is.undefined(candidate.languageId) || Is.string(candidate.languageId)) && Is.number(candidate.lineCount)\n            && Is.func(candidate.getText) && Is.func(candidate.positionAt) && Is.func(candidate.offsetAt) ? true : false;\n    }\n    TextDocument.is = is;\n    function applyEdits(document, edits) {\n        var text = document.getText();\n        var sortedEdits = mergeSort(edits, function (a, b) {\n            var diff = a.range.start.line - b.range.start.line;\n            if (diff === 0) {\n                return a.range.start.character - b.range.start.character;\n            }\n            return diff;\n        });\n        var lastModifiedOffset = text.length;\n        for (var i = sortedEdits.length - 1; i >= 0; i--) {\n            var e = sortedEdits[i];\n            var startOffset = document.offsetAt(e.range.start);\n            var endOffset = document.offsetAt(e.range.end);\n            if (endOffset <= lastModifiedOffset) {\n                text = text.substring(0, startOffset) + e.newText + text.substring(endOffset, text.length);\n            }\n            else {\n                throw new Error('Ovelapping edit');\n            }\n            lastModifiedOffset = startOffset;\n        }\n        return text;\n    }\n    TextDocument.applyEdits = applyEdits;\n    function mergeSort(data, compare) {\n        if (data.length <= 1) {\n            // sorted\n            return data;\n        }\n        var p = (data.length / 2) | 0;\n        var left = data.slice(0, p);\n        var right = data.slice(p);\n        mergeSort(left, compare);\n        mergeSort(right, compare);\n        var leftIdx = 0;\n        var rightIdx = 0;\n        var i = 0;\n        while (leftIdx < left.length && rightIdx < right.length) {\n            var ret = compare(left[leftIdx], right[rightIdx]);\n            if (ret <= 0) {\n                // smaller_equal -> take left to preserve order\n                data[i++] = left[leftIdx++];\n            }\n            else {\n                // greater -> take right\n                data[i++] = right[rightIdx++];\n            }\n        }\n        while (leftIdx < left.length) {\n            data[i++] = left[leftIdx++];\n        }\n        while (rightIdx < right.length) {\n            data[i++] = right[rightIdx++];\n        }\n        return data;\n    }\n})(TextDocument || (TextDocument = {}));\n/**\n * Represents reasons why a text document is saved.\n */\nexport var TextDocumentSaveReason;\n(function (TextDocumentSaveReason) {\n    /**\n     * Manually triggered, e.g. by the user pressing save, by starting debugging,\n     * or by an API call.\n     */\n    TextDocumentSaveReason.Manual = 1;\n    /**\n     * Automatic after a delay.\n     */\n    TextDocumentSaveReason.AfterDelay = 2;\n    /**\n     * When the editor lost focus.\n     */\n    TextDocumentSaveReason.FocusOut = 3;\n})(TextDocumentSaveReason || (TextDocumentSaveReason = {}));\nvar FullTextDocument = /** @class */ (function () {\n    function FullTextDocument(uri, languageId, version, content) {\n        this._uri = uri;\n        this._languageId = languageId;\n        this._version = version;\n        this._content = content;\n        this._lineOffsets = null;\n    }\n    Object.defineProperty(FullTextDocument.prototype, \"uri\", {\n        get: function () {\n            return this._uri;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FullTextDocument.prototype, \"languageId\", {\n        get: function () {\n            return this._languageId;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FullTextDocument.prototype, \"version\", {\n        get: function () {\n            return this._version;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    FullTextDocument.prototype.getText = function (range) {\n        if (range) {\n            var start = this.offsetAt(range.start);\n            var end = this.offsetAt(range.end);\n            return this._content.substring(start, end);\n        }\n        return this._content;\n    };\n    FullTextDocument.prototype.update = function (event, version) {\n        this._content = event.text;\n        this._version = version;\n        this._lineOffsets = null;\n    };\n    FullTextDocument.prototype.getLineOffsets = function () {\n        if (this._lineOffsets === null) {\n            var lineOffsets = [];\n            var text = this._content;\n            var isLineStart = true;\n            for (var i = 0; i < text.length; i++) {\n                if (isLineStart) {\n                    lineOffsets.push(i);\n                    isLineStart = false;\n                }\n                var ch = text.charAt(i);\n                isLineStart = (ch === '\\r' || ch === '\\n');\n                if (ch === '\\r' && i + 1 < text.length && text.charAt(i + 1) === '\\n') {\n                    i++;\n                }\n            }\n            if (isLineStart && text.length > 0) {\n                lineOffsets.push(text.length);\n            }\n            this._lineOffsets = lineOffsets;\n        }\n        return this._lineOffsets;\n    };\n    FullTextDocument.prototype.positionAt = function (offset) {\n        offset = Math.max(Math.min(offset, this._content.length), 0);\n        var lineOffsets = this.getLineOffsets();\n        var low = 0, high = lineOffsets.length;\n        if (high === 0) {\n            return Position.create(0, offset);\n        }\n        while (low < high) {\n            var mid = Math.floor((low + high) / 2);\n            if (lineOffsets[mid] > offset) {\n                high = mid;\n            }\n            else {\n                low = mid + 1;\n            }\n        }\n        // low is the least x for which the line offset is larger than the current offset\n        // or array.length if no line offset is larger than the current offset\n        var line = low - 1;\n        return Position.create(line, offset - lineOffsets[line]);\n    };\n    FullTextDocument.prototype.offsetAt = function (position) {\n        var lineOffsets = this.getLineOffsets();\n        if (position.line >= lineOffsets.length) {\n            return this._content.length;\n        }\n        else if (position.line < 0) {\n            return 0;\n        }\n        var lineOffset = lineOffsets[position.line];\n        var nextLineOffset = (position.line + 1 < lineOffsets.length) ? lineOffsets[position.line + 1] : this._content.length;\n        return Math.max(Math.min(lineOffset + position.character, nextLineOffset), lineOffset);\n    };\n    Object.defineProperty(FullTextDocument.prototype, \"lineCount\", {\n        get: function () {\n            return this.getLineOffsets().length;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return FullTextDocument;\n}());\nvar Is;\n(function (Is) {\n    var toString = Object.prototype.toString;\n    function defined(value) {\n        return typeof value !== 'undefined';\n    }\n    Is.defined = defined;\n    function undefined(value) {\n        return typeof value === 'undefined';\n    }\n    Is.undefined = undefined;\n    function boolean(value) {\n        return value === true || value === false;\n    }\n    Is.boolean = boolean;\n    function string(value) {\n        return toString.call(value) === '[object String]';\n    }\n    Is.string = string;\n    function number(value) {\n        return toString.call(value) === '[object Number]';\n    }\n    Is.number = number;\n    function func(value) {\n        return toString.call(value) === '[object Function]';\n    }\n    Is.func = func;\n    function objectLiteral(value) {\n        // Strictly speaking class instances pass this check as well. Since the LSP\n        // doesn't use classes we ignore this for now. If we do we need to add something\n        // like this: `Object.getPrototypeOf(Object.getPrototypeOf(x)) === null`\n        return value !== null && typeof value === 'object';\n    }\n    Is.objectLiteral = objectLiteral;\n    function typedArray(value, check) {\n        return Array.isArray(value) && value.every(check);\n    }\n    Is.typedArray = typedArray;\n})(Is || (Is = {}));\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nimport * as ls from './_deps/vscode-languageserver-types/main.js';\r\nvar Uri = monaco.Uri;\r\nvar Range = monaco.Range;\r\n// --- diagnostics --- ---\r\nvar DiagnosticsAdapter = /** @class */ (function () {\r\n    function DiagnosticsAdapter(_languageId, _worker, defaults) {\r\n        var _this = this;\r\n        this._languageId = _languageId;\r\n        this._worker = _worker;\r\n        this._disposables = [];\r\n        this._listener = Object.create(null);\r\n        var onModelAdd = function (model) {\r\n            var modeId = model.getModeId();\r\n            if (modeId !== _this._languageId) {\r\n                return;\r\n            }\r\n            var handle;\r\n            _this._listener[model.uri.toString()] = model.onDidChangeContent(function () {\r\n                clearTimeout(handle);\r\n                handle = setTimeout(function () { return _this._doValidate(model.uri, modeId); }, 500);\r\n            });\r\n            _this._doValidate(model.uri, modeId);\r\n        };\r\n        var onModelRemoved = function (model) {\r\n            monaco.editor.setModelMarkers(model, _this._languageId, []);\r\n            var uriStr = model.uri.toString();\r\n            var listener = _this._listener[uriStr];\r\n            if (listener) {\r\n                listener.dispose();\r\n                delete _this._listener[uriStr];\r\n            }\r\n        };\r\n        this._disposables.push(monaco.editor.onDidCreateModel(onModelAdd));\r\n        this._disposables.push(monaco.editor.onWillDisposeModel(function (model) {\r\n            onModelRemoved(model);\r\n            _this._resetSchema(model.uri);\r\n        }));\r\n        this._disposables.push(monaco.editor.onDidChangeModelLanguage(function (event) {\r\n            onModelRemoved(event.model);\r\n            onModelAdd(event.model);\r\n            _this._resetSchema(event.model.uri);\r\n        }));\r\n        this._disposables.push(defaults.onDidChange(function (_) {\r\n            monaco.editor.getModels().forEach(function (model) {\r\n                if (model.getModeId() === _this._languageId) {\r\n                    onModelRemoved(model);\r\n                    onModelAdd(model);\r\n                }\r\n            });\r\n        }));\r\n        this._disposables.push({\r\n            dispose: function () {\r\n                monaco.editor.getModels().forEach(onModelRemoved);\r\n                for (var key in _this._listener) {\r\n                    _this._listener[key].dispose();\r\n                }\r\n            }\r\n        });\r\n        monaco.editor.getModels().forEach(onModelAdd);\r\n    }\r\n    DiagnosticsAdapter.prototype.dispose = function () {\r\n        this._disposables.forEach(function (d) { return d && d.dispose(); });\r\n        this._disposables = [];\r\n    };\r\n    DiagnosticsAdapter.prototype._resetSchema = function (resource) {\r\n        this._worker().then(function (worker) {\r\n            worker.resetSchema(resource.toString());\r\n        });\r\n    };\r\n    DiagnosticsAdapter.prototype._doValidate = function (resource, languageId) {\r\n        this._worker(resource).then(function (worker) {\r\n            return worker.doValidation(resource.toString()).then(function (diagnostics) {\r\n                var markers = diagnostics.map(function (d) { return toDiagnostics(resource, d); });\r\n                var model = monaco.editor.getModel(resource);\r\n                if (model.getModeId() === languageId) {\r\n                    monaco.editor.setModelMarkers(model, languageId, markers);\r\n                }\r\n            });\r\n        }).then(undefined, function (err) {\r\n            console.error(err);\r\n        });\r\n    };\r\n    return DiagnosticsAdapter;\r\n}());\r\nexport { DiagnosticsAdapter };\r\nfunction toSeverity(lsSeverity) {\r\n    switch (lsSeverity) {\r\n        case ls.DiagnosticSeverity.Error: return monaco.MarkerSeverity.Error;\r\n        case ls.DiagnosticSeverity.Warning: return monaco.MarkerSeverity.Warning;\r\n        case ls.DiagnosticSeverity.Information: return monaco.MarkerSeverity.Info;\r\n        case ls.DiagnosticSeverity.Hint: return monaco.MarkerSeverity.Hint;\r\n        default:\r\n            return monaco.MarkerSeverity.Info;\r\n    }\r\n}\r\nfunction toDiagnostics(resource, diag) {\r\n    var code = typeof diag.code === 'number' ? String(diag.code) : diag.code;\r\n    return {\r\n        severity: toSeverity(diag.severity),\r\n        startLineNumber: diag.range.start.line + 1,\r\n        startColumn: diag.range.start.character + 1,\r\n        endLineNumber: diag.range.end.line + 1,\r\n        endColumn: diag.range.end.character + 1,\r\n        message: diag.message,\r\n        code: code,\r\n        source: diag.source\r\n    };\r\n}\r\n// --- completion ------\r\nfunction fromPosition(position) {\r\n    if (!position) {\r\n        return void 0;\r\n    }\r\n    return { character: position.column - 1, line: position.lineNumber - 1 };\r\n}\r\nfunction fromRange(range) {\r\n    if (!range) {\r\n        return void 0;\r\n    }\r\n    return { start: { line: range.startLineNumber - 1, character: range.startColumn - 1 }, end: { line: range.endLineNumber - 1, character: range.endColumn - 1 } };\r\n}\r\nfunction toRange(range) {\r\n    if (!range) {\r\n        return void 0;\r\n    }\r\n    return new Range(range.start.line + 1, range.start.character + 1, range.end.line + 1, range.end.character + 1);\r\n}\r\nfunction toCompletionItemKind(kind) {\r\n    var mItemKind = monaco.languages.CompletionItemKind;\r\n    switch (kind) {\r\n        case ls.CompletionItemKind.Text: return mItemKind.Text;\r\n        case ls.CompletionItemKind.Method: return mItemKind.Method;\r\n        case ls.CompletionItemKind.Function: return mItemKind.Function;\r\n        case ls.CompletionItemKind.Constructor: return mItemKind.Constructor;\r\n        case ls.CompletionItemKind.Field: return mItemKind.Field;\r\n        case ls.CompletionItemKind.Variable: return mItemKind.Variable;\r\n        case ls.CompletionItemKind.Class: return mItemKind.Class;\r\n        case ls.CompletionItemKind.Interface: return mItemKind.Interface;\r\n        case ls.CompletionItemKind.Module: return mItemKind.Module;\r\n        case ls.CompletionItemKind.Property: return mItemKind.Property;\r\n        case ls.CompletionItemKind.Unit: return mItemKind.Unit;\r\n        case ls.CompletionItemKind.Value: return mItemKind.Value;\r\n        case ls.CompletionItemKind.Enum: return mItemKind.Enum;\r\n        case ls.CompletionItemKind.Keyword: return mItemKind.Keyword;\r\n        case ls.CompletionItemKind.Snippet: return mItemKind.Snippet;\r\n        case ls.CompletionItemKind.Color: return mItemKind.Color;\r\n        case ls.CompletionItemKind.File: return mItemKind.File;\r\n        case ls.CompletionItemKind.Reference: return mItemKind.Reference;\r\n    }\r\n    return mItemKind.Property;\r\n}\r\nfunction fromCompletionItemKind(kind) {\r\n    var mItemKind = monaco.languages.CompletionItemKind;\r\n    switch (kind) {\r\n        case mItemKind.Text: return ls.CompletionItemKind.Text;\r\n        case mItemKind.Method: return ls.CompletionItemKind.Method;\r\n        case mItemKind.Function: return ls.CompletionItemKind.Function;\r\n        case mItemKind.Constructor: return ls.CompletionItemKind.Constructor;\r\n        case mItemKind.Field: return ls.CompletionItemKind.Field;\r\n        case mItemKind.Variable: return ls.CompletionItemKind.Variable;\r\n        case mItemKind.Class: return ls.CompletionItemKind.Class;\r\n        case mItemKind.Interface: return ls.CompletionItemKind.Interface;\r\n        case mItemKind.Module: return ls.CompletionItemKind.Module;\r\n        case mItemKind.Property: return ls.CompletionItemKind.Property;\r\n        case mItemKind.Unit: return ls.CompletionItemKind.Unit;\r\n        case mItemKind.Value: return ls.CompletionItemKind.Value;\r\n        case mItemKind.Enum: return ls.CompletionItemKind.Enum;\r\n        case mItemKind.Keyword: return ls.CompletionItemKind.Keyword;\r\n        case mItemKind.Snippet: return ls.CompletionItemKind.Snippet;\r\n        case mItemKind.Color: return ls.CompletionItemKind.Color;\r\n        case mItemKind.File: return ls.CompletionItemKind.File;\r\n        case mItemKind.Reference: return ls.CompletionItemKind.Reference;\r\n    }\r\n    return ls.CompletionItemKind.Property;\r\n}\r\nfunction toTextEdit(textEdit) {\r\n    if (!textEdit) {\r\n        return void 0;\r\n    }\r\n    return {\r\n        range: toRange(textEdit.range),\r\n        text: textEdit.newText\r\n    };\r\n}\r\nvar CompletionAdapter = /** @class */ (function () {\r\n    function CompletionAdapter(_worker) {\r\n        this._worker = _worker;\r\n    }\r\n    Object.defineProperty(CompletionAdapter.prototype, \"triggerCharacters\", {\r\n        get: function () {\r\n            return [' ', ':'];\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    CompletionAdapter.prototype.provideCompletionItems = function (model, position, context, token) {\r\n        var wordInfo = model.getWordUntilPosition(position);\r\n        var resource = model.uri;\r\n        return this._worker(resource).then(function (worker) {\r\n            return worker.doComplete(resource.toString(), fromPosition(position));\r\n        }).then(function (info) {\r\n            if (!info) {\r\n                return;\r\n            }\r\n            var items = info.items.map(function (entry) {\r\n                var item = {\r\n                    label: entry.label,\r\n                    insertText: entry.insertText || entry.label,\r\n                    sortText: entry.sortText,\r\n                    filterText: entry.filterText,\r\n                    documentation: entry.documentation,\r\n                    detail: entry.detail,\r\n                    kind: toCompletionItemKind(entry.kind),\r\n                };\r\n                if (entry.textEdit) {\r\n                    item.range = toRange(entry.textEdit.range);\r\n                    item.insertText = entry.textEdit.newText;\r\n                }\r\n                if (entry.additionalTextEdits) {\r\n                    item.additionalTextEdits = entry.additionalTextEdits.map(toTextEdit);\r\n                }\r\n                if (entry.insertTextFormat === ls.InsertTextFormat.Snippet) {\r\n                    item.insertTextRules = monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet;\r\n                }\r\n                return item;\r\n            });\r\n            return {\r\n                isIncomplete: info.isIncomplete,\r\n                suggestions: items\r\n            };\r\n        });\r\n    };\r\n    return CompletionAdapter;\r\n}());\r\nexport { CompletionAdapter };\r\nfunction isMarkupContent(thing) {\r\n    return thing && typeof thing === 'object' && typeof thing.kind === 'string';\r\n}\r\nfunction toMarkdownString(entry) {\r\n    if (typeof entry === 'string') {\r\n        return {\r\n            value: entry\r\n        };\r\n    }\r\n    if (isMarkupContent(entry)) {\r\n        if (entry.kind === 'plaintext') {\r\n            return {\r\n                value: entry.value.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&')\r\n            };\r\n        }\r\n        return {\r\n            value: entry.value\r\n        };\r\n    }\r\n    return { value: '```' + entry.language + '\\n' + entry.value + '\\n```\\n' };\r\n}\r\nfunction toMarkedStringArray(contents) {\r\n    if (!contents) {\r\n        return void 0;\r\n    }\r\n    if (Array.isArray(contents)) {\r\n        return contents.map(toMarkdownString);\r\n    }\r\n    return [toMarkdownString(contents)];\r\n}\r\n// --- hover ------\r\nvar HoverAdapter = /** @class */ (function () {\r\n    function HoverAdapter(_worker) {\r\n        this._worker = _worker;\r\n    }\r\n    HoverAdapter.prototype.provideHover = function (model, position, token) {\r\n        var resource = model.uri;\r\n        return this._worker(resource).then(function (worker) {\r\n            return worker.doHover(resource.toString(), fromPosition(position));\r\n        }).then(function (info) {\r\n            if (!info) {\r\n                return;\r\n            }\r\n            return {\r\n                range: toRange(info.range),\r\n                contents: toMarkedStringArray(info.contents)\r\n            };\r\n        });\r\n    };\r\n    return HoverAdapter;\r\n}());\r\nexport { HoverAdapter };\r\n// --- definition ------\r\nfunction toLocation(location) {\r\n    return {\r\n        uri: Uri.parse(location.uri),\r\n        range: toRange(location.range)\r\n    };\r\n}\r\n// --- document symbols ------\r\nfunction toSymbolKind(kind) {\r\n    var mKind = monaco.languages.SymbolKind;\r\n    switch (kind) {\r\n        case ls.SymbolKind.File: return mKind.Array;\r\n        case ls.SymbolKind.Module: return mKind.Module;\r\n        case ls.SymbolKind.Namespace: return mKind.Namespace;\r\n        case ls.SymbolKind.Package: return mKind.Package;\r\n        case ls.SymbolKind.Class: return mKind.Class;\r\n        case ls.SymbolKind.Method: return mKind.Method;\r\n        case ls.SymbolKind.Property: return mKind.Property;\r\n        case ls.SymbolKind.Field: return mKind.Field;\r\n        case ls.SymbolKind.Constructor: return mKind.Constructor;\r\n        case ls.SymbolKind.Enum: return mKind.Enum;\r\n        case ls.SymbolKind.Interface: return mKind.Interface;\r\n        case ls.SymbolKind.Function: return mKind.Function;\r\n        case ls.SymbolKind.Variable: return mKind.Variable;\r\n        case ls.SymbolKind.Constant: return mKind.Constant;\r\n        case ls.SymbolKind.String: return mKind.String;\r\n        case ls.SymbolKind.Number: return mKind.Number;\r\n        case ls.SymbolKind.Boolean: return mKind.Boolean;\r\n        case ls.SymbolKind.Array: return mKind.Array;\r\n    }\r\n    return mKind.Function;\r\n}\r\nvar DocumentSymbolAdapter = /** @class */ (function () {\r\n    function DocumentSymbolAdapter(_worker) {\r\n        this._worker = _worker;\r\n    }\r\n    DocumentSymbolAdapter.prototype.provideDocumentSymbols = function (model, token) {\r\n        var resource = model.uri;\r\n        return this._worker(resource).then(function (worker) { return worker.findDocumentSymbols(resource.toString()); }).then(function (items) {\r\n            if (!items) {\r\n                return;\r\n            }\r\n            return items.map(function (item) { return ({\r\n                name: item.name,\r\n                detail: '',\r\n                containerName: item.containerName,\r\n                kind: toSymbolKind(item.kind),\r\n                range: toRange(item.location.range),\r\n                selectionRange: toRange(item.location.range)\r\n            }); });\r\n        });\r\n    };\r\n    return DocumentSymbolAdapter;\r\n}());\r\nexport { DocumentSymbolAdapter };\r\nfunction fromFormattingOptions(options) {\r\n    return {\r\n        tabSize: options.tabSize,\r\n        insertSpaces: options.insertSpaces\r\n    };\r\n}\r\nvar DocumentFormattingEditProvider = /** @class */ (function () {\r\n    function DocumentFormattingEditProvider(_worker) {\r\n        this._worker = _worker;\r\n    }\r\n    DocumentFormattingEditProvider.prototype.provideDocumentFormattingEdits = function (model, options, token) {\r\n        var resource = model.uri;\r\n        return this._worker(resource).then(function (worker) {\r\n            return worker.format(resource.toString(), null, fromFormattingOptions(options)).then(function (edits) {\r\n                if (!edits || edits.length === 0) {\r\n                    return;\r\n                }\r\n                return edits.map(toTextEdit);\r\n            });\r\n        });\r\n    };\r\n    return DocumentFormattingEditProvider;\r\n}());\r\nexport { DocumentFormattingEditProvider };\r\nvar DocumentRangeFormattingEditProvider = /** @class */ (function () {\r\n    function DocumentRangeFormattingEditProvider(_worker) {\r\n        this._worker = _worker;\r\n    }\r\n    DocumentRangeFormattingEditProvider.prototype.provideDocumentRangeFormattingEdits = function (model, range, options, token) {\r\n        var resource = model.uri;\r\n        return this._worker(resource).then(function (worker) {\r\n            return worker.format(resource.toString(), fromRange(range), fromFormattingOptions(options)).then(function (edits) {\r\n                if (!edits || edits.length === 0) {\r\n                    return;\r\n                }\r\n                return edits.map(toTextEdit);\r\n            });\r\n        });\r\n    };\r\n    return DocumentRangeFormattingEditProvider;\r\n}());\r\nexport { DocumentRangeFormattingEditProvider };\r\nvar DocumentColorAdapter = /** @class */ (function () {\r\n    function DocumentColorAdapter(_worker) {\r\n        this._worker = _worker;\r\n    }\r\n    DocumentColorAdapter.prototype.provideDocumentColors = function (model, token) {\r\n        var resource = model.uri;\r\n        return this._worker(resource).then(function (worker) { return worker.findDocumentColors(resource.toString()); }).then(function (infos) {\r\n            if (!infos) {\r\n                return;\r\n            }\r\n            return infos.map(function (item) { return ({\r\n                color: item.color,\r\n                range: toRange(item.range)\r\n            }); });\r\n        });\r\n    };\r\n    DocumentColorAdapter.prototype.provideColorPresentations = function (model, info, token) {\r\n        var resource = model.uri;\r\n        return this._worker(resource).then(function (worker) { return worker.getColorPresentations(resource.toString(), info.color, fromRange(info.range)); }).then(function (presentations) {\r\n            if (!presentations) {\r\n                return;\r\n            }\r\n            return presentations.map(function (presentation) {\r\n                var item = {\r\n                    label: presentation.label,\r\n                };\r\n                if (presentation.textEdit) {\r\n                    item.textEdit = toTextEdit(presentation.textEdit);\r\n                }\r\n                if (presentation.additionalTextEdits) {\r\n                    item.additionalTextEdits = presentation.additionalTextEdits.map(toTextEdit);\r\n                }\r\n                return item;\r\n            });\r\n        });\r\n    };\r\n    return DocumentColorAdapter;\r\n}());\r\nexport { DocumentColorAdapter };\r\nvar FoldingRangeAdapter = /** @class */ (function () {\r\n    function FoldingRangeAdapter(_worker) {\r\n        this._worker = _worker;\r\n    }\r\n    FoldingRangeAdapter.prototype.provideFoldingRanges = function (model, context, token) {\r\n        var resource = model.uri;\r\n        return this._worker(resource).then(function (worker) { return worker.provideFoldingRanges(resource.toString(), context); }).then(function (ranges) {\r\n            if (!ranges) {\r\n                return;\r\n            }\r\n            return ranges.map(function (range) {\r\n                var result = {\r\n                    start: range.startLine + 1,\r\n                    end: range.endLine + 1\r\n                };\r\n                if (typeof range.kind !== 'undefined') {\r\n                    result.kind = toFoldingRangeKind(range.kind);\r\n                }\r\n                return result;\r\n            });\r\n        });\r\n    };\r\n    return FoldingRangeAdapter;\r\n}());\r\nexport { FoldingRangeAdapter };\r\nfunction toFoldingRangeKind(kind) {\r\n    switch (kind) {\r\n        case ls.FoldingRangeKind.Comment: return monaco.languages.FoldingRangeKind.Comment;\r\n        case ls.FoldingRangeKind.Imports: return monaco.languages.FoldingRangeKind.Imports;\r\n        case ls.FoldingRangeKind.Region: return monaco.languages.FoldingRangeKind.Region;\r\n    }\r\n    return void 0;\r\n}\r\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport function createScanner(text, ignoreTrivia) {\n    if (ignoreTrivia === void 0) { ignoreTrivia = false; }\n    var pos = 0, len = text.length, value = '', tokenOffset = 0, token = 16 /* Unknown */, scanError = 0 /* None */;\n    function scanHexDigits(count, exact) {\n        var digits = 0;\n        var value = 0;\n        while (digits < count || !exact) {\n            var ch = text.charCodeAt(pos);\n            if (ch >= 48 /* _0 */ && ch <= 57 /* _9 */) {\n                value = value * 16 + ch - 48 /* _0 */;\n            }\n            else if (ch >= 65 /* A */ && ch <= 70 /* F */) {\n                value = value * 16 + ch - 65 /* A */ + 10;\n            }\n            else if (ch >= 97 /* a */ && ch <= 102 /* f */) {\n                value = value * 16 + ch - 97 /* a */ + 10;\n            }\n            else {\n                break;\n            }\n            pos++;\n            digits++;\n        }\n        if (digits < count) {\n            value = -1;\n        }\n        return value;\n    }\n    function setPosition(newPosition) {\n        pos = newPosition;\n        value = '';\n        tokenOffset = 0;\n        token = 16 /* Unknown */;\n        scanError = 0 /* None */;\n    }\n    function scanNumber() {\n        var start = pos;\n        if (text.charCodeAt(pos) === 48 /* _0 */) {\n            pos++;\n        }\n        else {\n            pos++;\n            while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n            }\n        }\n        if (pos < text.length && text.charCodeAt(pos) === 46 /* dot */) {\n            pos++;\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n                return text.substring(start, pos);\n            }\n        }\n        var end = pos;\n        if (pos < text.length && (text.charCodeAt(pos) === 69 /* E */ || text.charCodeAt(pos) === 101 /* e */)) {\n            pos++;\n            if (pos < text.length && text.charCodeAt(pos) === 43 /* plus */ || text.charCodeAt(pos) === 45 /* minus */) {\n                pos++;\n            }\n            if (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                pos++;\n                while (pos < text.length && isDigit(text.charCodeAt(pos))) {\n                    pos++;\n                }\n                end = pos;\n            }\n            else {\n                scanError = 3 /* UnexpectedEndOfNumber */;\n            }\n        }\n        return text.substring(start, end);\n    }\n    function scanString() {\n        var result = '', start = pos;\n        while (true) {\n            if (pos >= len) {\n                result += text.substring(start, pos);\n                scanError = 2 /* UnexpectedEndOfString */;\n                break;\n            }\n            var ch = text.charCodeAt(pos);\n            if (ch === 34 /* doubleQuote */) {\n                result += text.substring(start, pos);\n                pos++;\n                break;\n            }\n            if (ch === 92 /* backslash */) {\n                result += text.substring(start, pos);\n                pos++;\n                if (pos >= len) {\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                ch = text.charCodeAt(pos++);\n                switch (ch) {\n                    case 34 /* doubleQuote */:\n                        result += '\\\"';\n                        break;\n                    case 92 /* backslash */:\n                        result += '\\\\';\n                        break;\n                    case 47 /* slash */:\n                        result += '/';\n                        break;\n                    case 98 /* b */:\n                        result += '\\b';\n                        break;\n                    case 102 /* f */:\n                        result += '\\f';\n                        break;\n                    case 110 /* n */:\n                        result += '\\n';\n                        break;\n                    case 114 /* r */:\n                        result += '\\r';\n                        break;\n                    case 116 /* t */:\n                        result += '\\t';\n                        break;\n                    case 117 /* u */:\n                        var ch_1 = scanHexDigits(4, true);\n                        if (ch_1 >= 0) {\n                            result += String.fromCharCode(ch_1);\n                        }\n                        else {\n                            scanError = 4 /* InvalidUnicode */;\n                        }\n                        break;\n                    default:\n                        scanError = 5 /* InvalidEscapeCharacter */;\n                }\n                start = pos;\n                continue;\n            }\n            if (ch >= 0 && ch <= 0x1f) {\n                if (isLineBreak(ch)) {\n                    result += text.substring(start, pos);\n                    scanError = 2 /* UnexpectedEndOfString */;\n                    break;\n                }\n                else {\n                    scanError = 6 /* InvalidCharacter */;\n                    // mark as error but continue with string\n                }\n            }\n            pos++;\n        }\n        return result;\n    }\n    function scanNext() {\n        value = '';\n        scanError = 0 /* None */;\n        tokenOffset = pos;\n        if (pos >= len) {\n            // at the end\n            tokenOffset = len;\n            return token = 17 /* EOF */;\n        }\n        var code = text.charCodeAt(pos);\n        // trivia: whitespace\n        if (isWhiteSpace(code)) {\n            do {\n                pos++;\n                value += String.fromCharCode(code);\n                code = text.charCodeAt(pos);\n            } while (isWhiteSpace(code));\n            return token = 15 /* Trivia */;\n        }\n        // trivia: newlines\n        if (isLineBreak(code)) {\n            pos++;\n            value += String.fromCharCode(code);\n            if (code === 13 /* carriageReturn */ && text.charCodeAt(pos) === 10 /* lineFeed */) {\n                pos++;\n                value += '\\n';\n            }\n            return token = 14 /* LineBreakTrivia */;\n        }\n        switch (code) {\n            // tokens: []{}:,\n            case 123 /* openBrace */:\n                pos++;\n                return token = 1 /* OpenBraceToken */;\n            case 125 /* closeBrace */:\n                pos++;\n                return token = 2 /* CloseBraceToken */;\n            case 91 /* openBracket */:\n                pos++;\n                return token = 3 /* OpenBracketToken */;\n            case 93 /* closeBracket */:\n                pos++;\n                return token = 4 /* CloseBracketToken */;\n            case 58 /* colon */:\n                pos++;\n                return token = 6 /* ColonToken */;\n            case 44 /* comma */:\n                pos++;\n                return token = 5 /* CommaToken */;\n            // strings\n            case 34 /* doubleQuote */:\n                pos++;\n                value = scanString();\n                return token = 10 /* StringLiteral */;\n            // comments\n            case 47 /* slash */:\n                var start = pos - 1;\n                // Single-line comment\n                if (text.charCodeAt(pos + 1) === 47 /* slash */) {\n                    pos += 2;\n                    while (pos < len) {\n                        if (isLineBreak(text.charCodeAt(pos))) {\n                            break;\n                        }\n                        pos++;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 12 /* LineCommentTrivia */;\n                }\n                // Multi-line comment\n                if (text.charCodeAt(pos + 1) === 42 /* asterisk */) {\n                    pos += 2;\n                    var commentClosed = false;\n                    while (pos < len) {\n                        var ch = text.charCodeAt(pos);\n                        if (ch === 42 /* asterisk */ && (pos + 1 < len) && text.charCodeAt(pos + 1) === 47 /* slash */) {\n                            pos += 2;\n                            commentClosed = true;\n                            break;\n                        }\n                        pos++;\n                    }\n                    if (!commentClosed) {\n                        pos++;\n                        scanError = 1 /* UnexpectedEndOfComment */;\n                    }\n                    value = text.substring(start, pos);\n                    return token = 13 /* BlockCommentTrivia */;\n                }\n                // just a single slash\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n            // numbers\n            case 45 /* minus */:\n                value += String.fromCharCode(code);\n                pos++;\n                if (pos === len || !isDigit(text.charCodeAt(pos))) {\n                    return token = 16 /* Unknown */;\n                }\n            // found a minus, followed by a number so\n            // we fall through to proceed with scanning\n            // numbers\n            case 48 /* _0 */:\n            case 49 /* _1 */:\n            case 50 /* _2 */:\n            case 51 /* _3 */:\n            case 52 /* _4 */:\n            case 53 /* _5 */:\n            case 54 /* _6 */:\n            case 55 /* _7 */:\n            case 56 /* _8 */:\n            case 57 /* _9 */:\n                value += scanNumber();\n                return token = 11 /* NumericLiteral */;\n            // literals and unknown symbols\n            default:\n                // is a literal? Read the full word.\n                while (pos < len && isUnknownContentCharacter(code)) {\n                    pos++;\n                    code = text.charCodeAt(pos);\n                }\n                if (tokenOffset !== pos) {\n                    value = text.substring(tokenOffset, pos);\n                    // keywords: true, false, null\n                    switch (value) {\n                        case 'true': return token = 8 /* TrueKeyword */;\n                        case 'false': return token = 9 /* FalseKeyword */;\n                        case 'null': return token = 7 /* NullKeyword */;\n                    }\n                    return token = 16 /* Unknown */;\n                }\n                // some\n                value += String.fromCharCode(code);\n                pos++;\n                return token = 16 /* Unknown */;\n        }\n    }\n    function isUnknownContentCharacter(code) {\n        if (isWhiteSpace(code) || isLineBreak(code)) {\n            return false;\n        }\n        switch (code) {\n            case 125 /* closeBrace */:\n            case 93 /* closeBracket */:\n            case 123 /* openBrace */:\n            case 91 /* openBracket */:\n            case 34 /* doubleQuote */:\n            case 58 /* colon */:\n            case 44 /* comma */:\n            case 47 /* slash */:\n                return false;\n        }\n        return true;\n    }\n    function scanNextNonTrivia() {\n        var result;\n        do {\n            result = scanNext();\n        } while (result >= 12 /* LineCommentTrivia */ && result <= 15 /* Trivia */);\n        return result;\n    }\n    return {\n        setPosition: setPosition,\n        getPosition: function () { return pos; },\n        scan: ignoreTrivia ? scanNextNonTrivia : scanNext,\n        getToken: function () { return token; },\n        getTokenValue: function () { return value; },\n        getTokenOffset: function () { return tokenOffset; },\n        getTokenLength: function () { return pos - tokenOffset; },\n        getTokenError: function () { return scanError; }\n    };\n}\nfunction isWhiteSpace(ch) {\n    return ch === 32 /* space */ || ch === 9 /* tab */ || ch === 11 /* verticalTab */ || ch === 12 /* formFeed */ ||\n        ch === 160 /* nonBreakingSpace */ || ch === 5760 /* ogham */ || ch >= 8192 /* enQuad */ && ch <= 8203 /* zeroWidthSpace */ ||\n        ch === 8239 /* narrowNoBreakSpace */ || ch === 8287 /* mathematicalSpace */ || ch === 12288 /* ideographicSpace */ || ch === 65279 /* byteOrderMark */;\n}\nfunction isLineBreak(ch) {\n    return ch === 10 /* lineFeed */ || ch === 13 /* carriageReturn */ || ch === 8232 /* lineSeparator */ || ch === 8233 /* paragraphSeparator */;\n}\nfunction isDigit(ch) {\n    return ch >= 48 /* _0 */ && ch <= 57 /* _9 */;\n}\n//# sourceMappingURL=scanner.js.map","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nimport * as formatter from './impl/format.js';\nimport * as edit from './impl/edit.js';\nimport * as scanner from './impl/scanner.js';\nimport * as parser from './impl/parser.js';\n/**\n * Creates a JSON scanner on the given text.\n * If ignoreTrivia is set, whitespaces or comments are ignored.\n */\nexport var createScanner = scanner.createScanner;\n/**\n * For a given offset, evaluate the location in the JSON document. Each segment in the location path is either a property name or an array index.\n */\nexport var getLocation = parser.getLocation;\n/**\n * Parses the given text and returns the object the JSON content represents. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n * Therefore always check the errors list to find out if the input was valid.\n */\nexport var parse = parser.parse;\n/**\n * Parses the given text and returns a tree representation the JSON content. On invalid input, the parser tries to be as fault tolerant as possible, but still return a result.\n */\nexport var parseTree = parser.parseTree;\n/**\n * Finds the node at the given path in a JSON DOM.\n */\nexport var findNodeAtLocation = parser.findNodeAtLocation;\n/**\n * Finds the most inner node at the given offset. If includeRightBound is set, also finds nodes that end at the given offset.\n */\nexport var findNodeAtOffset = parser.findNodeAtOffset;\n/**\n * Gets the JSON path of the given JSON DOM node\n */\nexport var getNodePath = parser.getNodePath;\n/**\n * Evaluates the JavaScript object of the given JSON DOM node\n */\nexport var getNodeValue = parser.getNodeValue;\n/**\n * Parses the given text and invokes the visitor functions for each object, array and literal reached.\n */\nexport var visit = parser.visit;\n/**\n * Takes JSON with JavaScript-style comments and remove\n * them. Optionally replaces every none-newline character\n * of comments with a replaceCharacter\n */\nexport var stripComments = parser.stripComments;\n/**\n * Computes the edits needed to format a JSON document.\n *\n * @param documentText The input text\n * @param range The range to format or `undefined` to format the full content\n * @param options The formatting options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nexport function format(documentText, range, options) {\n    return formatter.format(documentText, range, options);\n}\n/**\n * Computes the edits needed to modify a value in the JSON document.\n *\n * @param documentText The input text\n * @param path The path of the value to change. The path represents either to the document root, a property or an array item.\n * If the path points to an non-existing property or item, it will be created.\n * @param value The new value for the specified property or item. If the value is undefined,\n * the property or item will be removed.\n * @param options Options\n * @returns A list of edit operations describing the formatting changes to the original document. Edits can be either inserts, replacements or\n * removals of text segments. All offsets refer to the original state of the document. No two edits must change or remove the same range of\n * text in the original document. However, multiple edits can have\n * the same offset, for example multiple inserts, or an insert followed by a remove or replace. The order in the array defines which edit is applied first.\n * To apply edits to an input, you can use `applyEdits`\n */\nexport function modify(text, path, value, options) {\n    return edit.setProperty(text, path, value, options.formattingOptions, options.getInsertionIndex);\n}\n/**\n * Applies edits to a input string.\n */\nexport function applyEdits(text, edits) {\n    for (var i = edits.length - 1; i >= 0; i--) {\n        text = edit.applyEdit(text, edits[i]);\n    }\n    return text;\n}\n//# sourceMappingURL=main.js.map","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nimport * as json from './_deps/jsonc-parser/main.js';\r\nexport function createTokenizationSupport(supportComments) {\r\n    return {\r\n        getInitialState: function () { return new JSONState(null, null, false); },\r\n        tokenize: function (line, state, offsetDelta, stopAtOffset) { return tokenize(supportComments, line, state, offsetDelta, stopAtOffset); }\r\n    };\r\n}\r\nexport var TOKEN_DELIM_OBJECT = 'delimiter.bracket.json';\r\nexport var TOKEN_DELIM_ARRAY = 'delimiter.array.json';\r\nexport var TOKEN_DELIM_COLON = 'delimiter.colon.json';\r\nexport var TOKEN_DELIM_COMMA = 'delimiter.comma.json';\r\nexport var TOKEN_VALUE_BOOLEAN = 'keyword.json';\r\nexport var TOKEN_VALUE_NULL = 'keyword.json';\r\nexport var TOKEN_VALUE_STRING = 'string.value.json';\r\nexport var TOKEN_VALUE_NUMBER = 'number.json';\r\nexport var TOKEN_PROPERTY_NAME = 'string.key.json';\r\nexport var TOKEN_COMMENT_BLOCK = 'comment.block.json';\r\nexport var TOKEN_COMMENT_LINE = 'comment.line.json';\r\nvar JSONState = /** @class */ (function () {\r\n    function JSONState(state, scanError, lastWasColon) {\r\n        this._state = state;\r\n        this.scanError = scanError;\r\n        this.lastWasColon = lastWasColon;\r\n    }\r\n    JSONState.prototype.clone = function () {\r\n        return new JSONState(this._state, this.scanError, this.lastWasColon);\r\n    };\r\n    JSONState.prototype.equals = function (other) {\r\n        if (other === this) {\r\n            return true;\r\n        }\r\n        if (!other || !(other instanceof JSONState)) {\r\n            return false;\r\n        }\r\n        return this.scanError === other.scanError &&\r\n            this.lastWasColon === other.lastWasColon;\r\n    };\r\n    JSONState.prototype.getStateData = function () {\r\n        return this._state;\r\n    };\r\n    JSONState.prototype.setStateData = function (state) {\r\n        this._state = state;\r\n    };\r\n    return JSONState;\r\n}());\r\nfunction tokenize(comments, line, state, offsetDelta, stopAtOffset) {\r\n    if (offsetDelta === void 0) { offsetDelta = 0; }\r\n    // handle multiline strings and block comments\r\n    var numberOfInsertedCharacters = 0, adjustOffset = false;\r\n    switch (state.scanError) {\r\n        case 2 /* UnexpectedEndOfString */:\r\n            line = '\"' + line;\r\n            numberOfInsertedCharacters = 1;\r\n            break;\r\n        case 1 /* UnexpectedEndOfComment */:\r\n            line = '/*' + line;\r\n            numberOfInsertedCharacters = 2;\r\n            break;\r\n    }\r\n    var scanner = json.createScanner(line), kind, ret, lastWasColon = state.lastWasColon;\r\n    ret = {\r\n        tokens: [],\r\n        endState: state.clone()\r\n    };\r\n    while (true) {\r\n        var offset = offsetDelta + scanner.getPosition(), type = '';\r\n        kind = scanner.scan();\r\n        if (kind === 17 /* EOF */) {\r\n            break;\r\n        }\r\n        // Check that the scanner has advanced\r\n        if (offset === offsetDelta + scanner.getPosition()) {\r\n            throw new Error('Scanner did not advance, next 3 characters are: ' + line.substr(scanner.getPosition(), 3));\r\n        }\r\n        // In case we inserted /* or \" character, we need to\r\n        // adjust the offset of all tokens (except the first)\r\n        if (adjustOffset) {\r\n            offset -= numberOfInsertedCharacters;\r\n        }\r\n        adjustOffset = numberOfInsertedCharacters > 0;\r\n        // brackets and type\r\n        switch (kind) {\r\n            case 1 /* OpenBraceToken */:\r\n                type = TOKEN_DELIM_OBJECT;\r\n                lastWasColon = false;\r\n                break;\r\n            case 2 /* CloseBraceToken */:\r\n                type = TOKEN_DELIM_OBJECT;\r\n                lastWasColon = false;\r\n                break;\r\n            case 3 /* OpenBracketToken */:\r\n                type = TOKEN_DELIM_ARRAY;\r\n                lastWasColon = false;\r\n                break;\r\n            case 4 /* CloseBracketToken */:\r\n                type = TOKEN_DELIM_ARRAY;\r\n                lastWasColon = false;\r\n                break;\r\n            case 6 /* ColonToken */:\r\n                type = TOKEN_DELIM_COLON;\r\n                lastWasColon = true;\r\n                break;\r\n            case 5 /* CommaToken */:\r\n                type = TOKEN_DELIM_COMMA;\r\n                lastWasColon = false;\r\n                break;\r\n            case 8 /* TrueKeyword */:\r\n            case 9 /* FalseKeyword */:\r\n                type = TOKEN_VALUE_BOOLEAN;\r\n                lastWasColon = false;\r\n                break;\r\n            case 7 /* NullKeyword */:\r\n                type = TOKEN_VALUE_NULL;\r\n                lastWasColon = false;\r\n                break;\r\n            case 10 /* StringLiteral */:\r\n                type = lastWasColon ? TOKEN_VALUE_STRING : TOKEN_PROPERTY_NAME;\r\n                lastWasColon = false;\r\n                break;\r\n            case 11 /* NumericLiteral */:\r\n                type = TOKEN_VALUE_NUMBER;\r\n                lastWasColon = false;\r\n                break;\r\n        }\r\n        // comments, iff enabled\r\n        if (comments) {\r\n            switch (kind) {\r\n                case 12 /* LineCommentTrivia */:\r\n                    type = TOKEN_COMMENT_LINE;\r\n                    break;\r\n                case 13 /* BlockCommentTrivia */:\r\n                    type = TOKEN_COMMENT_BLOCK;\r\n                    break;\r\n            }\r\n        }\r\n        ret.endState = new JSONState(state.getStateData(), scanner.getTokenError(), lastWasColon);\r\n        ret.tokens.push({\r\n            startIndex: offset,\r\n            scopes: type\r\n        });\r\n    }\r\n    return ret;\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n'use strict';\r\nimport { WorkerManager } from './workerManager.js';\r\nimport * as languageFeatures from './languageFeatures.js';\r\nimport { createTokenizationSupport } from './tokenization.js';\r\nexport function setupMode(defaults) {\r\n    var disposables = [];\r\n    var client = new WorkerManager(defaults);\r\n    disposables.push(client);\r\n    var worker = function () {\r\n        var uris = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            uris[_i] = arguments[_i];\r\n        }\r\n        return client.getLanguageServiceWorker.apply(client, uris);\r\n    };\r\n    var languageId = defaults.languageId;\r\n    disposables.push(monaco.languages.registerCompletionItemProvider(languageId, new languageFeatures.CompletionAdapter(worker)));\r\n    disposables.push(monaco.languages.registerHoverProvider(languageId, new languageFeatures.HoverAdapter(worker)));\r\n    disposables.push(monaco.languages.registerDocumentSymbolProvider(languageId, new languageFeatures.DocumentSymbolAdapter(worker)));\r\n    disposables.push(monaco.languages.registerDocumentFormattingEditProvider(languageId, new languageFeatures.DocumentFormattingEditProvider(worker)));\r\n    disposables.push(monaco.languages.registerDocumentRangeFormattingEditProvider(languageId, new languageFeatures.DocumentRangeFormattingEditProvider(worker)));\r\n    disposables.push(new languageFeatures.DiagnosticsAdapter(languageId, worker, defaults));\r\n    disposables.push(monaco.languages.setTokensProvider(languageId, createTokenizationSupport(true)));\r\n    disposables.push(monaco.languages.setLanguageConfiguration(languageId, richEditConfiguration));\r\n    disposables.push(monaco.languages.registerColorProvider(languageId, new languageFeatures.DocumentColorAdapter(worker)));\r\n    disposables.push(monaco.languages.registerFoldingRangeProvider(languageId, new languageFeatures.FoldingRangeAdapter(worker)));\r\n}\r\nvar richEditConfiguration = {\r\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\[\\{\\]\\}\\:\\\"\\,\\s]+)/g,\r\n    comments: {\r\n        lineComment: '//',\r\n        blockComment: ['/*', '*/']\r\n    },\r\n    brackets: [\r\n        ['{', '}'],\r\n        ['[', ']']\r\n    ],\r\n    autoClosingPairs: [\r\n        { open: '{', close: '}', notIn: ['string'] },\r\n        { open: '[', close: ']', notIn: ['string'] },\r\n        { open: '\"', close: '\"', notIn: ['string'] }\r\n    ]\r\n};\r\n"],"sourceRoot":""}